import secrets
import os
from typing import Optional, Dict, Any, Tuple
from datetime import datetime, timedelta, date

from sqlalchemy import select, and_, update, desc
from sqlalchemy.ext.asyncio import AsyncSession

from db import SessionLocal
from db.models import User, PromoCode, PromoRedemption, Transaction, SubscriptionPass, PassUsage
from config import (
    DEFAULT_FREE_CREDITS,
    REFERRAL_BONUS_INVITED,
    REFERRAL_BONUS_REFERRER,
    PROMO_DEFAULT_CREDITS,
)

# ---------- Helpers ----------

def _gen_invite_code(length: int = 6) -> str:
    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"  # –±–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return "".join(secrets.choice(alphabet) for _ in range(length))

async def get_session() -> AsyncSession:
    return SessionLocal()

# ---------- Users ----------

async def ensure_user(tg_id: int, username: Optional[str]) -> User:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç invite_code –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ."""
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        user = res.scalar_one_or_none()

        if user:
            if username and user.username != username:
                user.username = username
                await session.commit()
            return user

        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
        code = _gen_invite_code()
        while True:
            exists = await session.execute(select(User).where(User.invite_code == code))
            if not exists.scalar_one_or_none():
                break
            code = _gen_invite_code()

        user = User(
            tg_id=tg_id,
            username=username,
            invite_code=code,
            credits=DEFAULT_FREE_CREDITS,   # —Ç–µ–ø–µ—Ä—å –æ–¥–Ω–æ –ø–æ–ª–µ
        )
        session.add(user)
        await session.commit()
        await session.refresh(user)
        return user

async def get_user_balance(tg_id: int) -> int:
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        u = res.scalar_one_or_none()
        if not u:
            return 0
        return u.credits


# ---------- Credits ----------

async def grant_credits(user_id: int, amount: int, reason: str, meta: Optional[Dict[str, Any]] = None):
    """–ù–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã + —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. meta ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤."""
    async with SessionLocal() as session:
        u = await session.get(User, user_id)
        if not u:
            return
        u.credits += amount
        meta_final = (meta or {}) | {"reason": reason}
        tx = Transaction(user_id=user_id, type="grant", amount=amount, status="success", meta=meta_final)
        session.add(tx)
        await session.commit()

async def spend_one_credit(tg_id: int) -> bool:
    """–°–ø–∏—Å–∞—Ç—å 1 –∫—Ä–µ–¥–∏—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        u: Optional[User] = res.scalar_one_or_none()
        if not u or u.credits <= 0:
            return False

        u.credits -= 1
        tx = Transaction(user_id=u.id, type="spend", amount=1, status="success")
        session.add(tx)
        await session.commit()
        return True


# ---------- Promo / Referral ----------

async def create_referral_promocode_for_user(user: User) -> PromoCode:
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ = invite_code –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with SessionLocal() as session:
        res = await session.execute(select(PromoCode).where(PromoCode.code == user.invite_code))
        p = res.scalar_one_or_none()
        if p:
            return p
        promo = PromoCode(
            code=user.invite_code,
            is_referral=True,
            free_credits_award=REFERRAL_BONUS_INVITED,
            max_uses=None,
            used_count=0,
            created_by_user_id=user.id,
        )
        session.add(promo)
        await session.commit()
        await session.refresh(promo)
        return promo

async def redeem_promocode(tg_id: int, code: str) -> tuple[bool, str]:
    """
    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.
    """
    code = code.strip().upper()
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        user = res.scalar_one_or_none()
        if not user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        res = await session.execute(select(PromoCode).where(PromoCode.code == code))
        promo = res.scalar_one_or_none()

        if not promo:
            return False, "–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç"

        if promo.is_referral and promo.created_by_user_id == user.id:
            return False, "–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥ üòä"

        already = await session.execute(
            select(PromoRedemption).where(
                and_(PromoRedemption.user_id == user.id, PromoRedemption.promocode_id == promo.id)
            )
        )
        if already.scalar_one_or_none():
            return False, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"

        now = datetime.utcnow()
        if promo.expires_at and now > promo.expires_at:
            return False, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫"

        if promo.max_uses is not None and promo.used_count >= promo.max_uses:
            return False, "–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω"

        # –Ω–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        award = promo.free_credits_award or PROMO_DEFAULT_CREDITS
        user.credits += award

        # –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
        if promo.is_referral and promo.created_by_user_id:
            referrer = await session.get(User, promo.created_by_user_id)
            if referrer:
                referrer.credits += REFERRAL_BONUS_REFERRER
                session.add(Transaction(
                    user_id=referrer.id, type="grant", amount=REFERRAL_BONUS_REFERRER,
                    status="success", meta={"reason": "referral_bonus"}
                ))

        promo.used_count += 1
        session.add(PromoRedemption(user_id=user.id, promocode_id=promo.id))
        session.add(Transaction(
            user_id=user.id, type="grant", amount=award,
            status="success", meta={"reason": "promo_redeem", "code": code}
        ))
        await session.commit()

        return True, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ {award} —Å–æ–æ–±—â–µ–Ω–∏–π üéâ"

def build_invite_link(invite_code: str) -> str:
    return f"https://t.me/kartataro1_bot?start={invite_code}"


# ---------- PASS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------

PASS_DAYS = 30
# –ü—Å–µ–≤–¥–æ–±–µ–∑–ª–∏–º–∏—Ç (fair-use)
DAY_LIMIT = int(os.getenv("PASS_DAY_LIMIT", 25))           # —Å–∫–æ–ª—å–∫–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ —Å—É—Ç–∫–∏
BURST_PER_MIN = int(os.getenv("PASS_BURST_PER_MIN", 2))    # –Ω–µ —á–∞—â–µ N –≤ –º–∏–Ω—É—Ç—É


# ---------- PASS: –∞–∫—Ç–∏–≤–∞—Ü–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∞/—É—á—ë—Ç ----------

async def activate_pass_month(user_id: int, tg_id: int, plan: str = "pass_unlim") -> datetime:
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å PASS –Ω–∞ 30 –¥–Ω–µ–π (–±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤)."""
    expires = datetime.utcnow() + timedelta(days=PASS_DAYS)
    async with SessionLocal() as s:
        res = await s.execute(select(SubscriptionPass).where(SubscriptionPass.user_id == user_id))
        sp = res.scalar_one_or_none()
        if sp:
            sp.expires_at = expires
            sp.plan = plan
        else:
            s.add(SubscriptionPass(user_id=user_id, tg_id=tg_id, plan=plan, expires_at=expires))
        await s.commit()
    return expires


async def _get_latest_active_pass_by_tg(tg_id: int):
    """–í–µ—Ä–Ω—É—Ç—å —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å PASS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–∂–µ –µ—Å–ª–∏ –∏—Å—Ç—ë–∫—à–∞—è)."""
    async with SessionLocal() as s:
        q = (
            select(SubscriptionPass, User)
            .join(User, User.id == SubscriptionPass.user_id)
            .where(User.tg_id == tg_id)
            .order_by(desc(SubscriptionPass.expires_at))
        )
        res = await s.execute(q)
        return res.first()  # (SubscriptionPass, User) –∏–ª–∏ None


async def pass_is_active(tg_id: int) -> bool:
    now = datetime.utcnow()
    row = await _get_latest_active_pass_by_tg(tg_id)
    if not row:
        return False
    sp, _user = row
    return sp.expires_at is not None and sp.expires_at >= now


async def pass_can_spend(tg_id: int) -> Tuple[bool, str, Optional[int]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ PASS. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, why, used_today)."""
    now = datetime.utcnow()
    today = now.date()

    row = await _get_latest_active_pass_by_tg(tg_id)
    if not row:
        return False, "PASS –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", None

    sp, user = row
    if not sp.expires_at or sp.expires_at < now:
        return False, "–°—Ä–æ–∫ PASS –∏—Å—Ç—ë–∫", None

    async with SessionLocal() as s:
        res2 = await s.execute(select(PassUsage).where(PassUsage.user_id == user.id, PassUsage.day == today))
        pu = res2.scalar_one_or_none()

        if pu:
            # –∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ BURST_PER_MIN –≤ –º–∏–Ω—É—Ç—É
            min_interval = max(1, 60 / max(1, BURST_PER_MIN))
            if (now - pu.last_ts).total_seconds() < min_interval:
                return False, "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", pu.used
            if pu.used >= DAY_LIMIT:
                return False, f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç PASS –∏—Å—á–µ—Ä–ø–∞–Ω ({DAY_LIMIT}).", pu.used
            return True, "", pu.used

        # –µ—â—ë –Ω–µ —Ç—Ä–∞—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        return True, "", 0


async def pass_register_spend(tg_id: int) -> int:
    """–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ PASS –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ used."""
    now = datetime.utcnow()
    today = now.date()
    async with SessionLocal() as s:
        res = await s.execute(select(User).where(User.tg_id == tg_id))
        user = res.scalar_one_or_none()
        if not user:
            return 0

        res2 = await s.execute(select(PassUsage).where(PassUsage.user_id == user.id, PassUsage.day == today))
        pu = res2.scalar_one_or_none()
        if pu:
            pu.used += 1
            pu.last_ts = now
            used_now = pu.used
        else:
            pu = PassUsage(user_id=user.id, day=today, used=1, last_ts=now)
            s.add(pu)
            used_now = 1

        await s.commit()
        return used_now


async def spend_one_or_pass(tg_id: int) -> Tuple[bool, str]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ PASS (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –∏ –ª–∏–º–∏—Ç—ã –û–ö), –∏–Ω–∞—á–µ —Å–ø–∏—Å—ã–≤–∞–µ–º 1 –∫—Ä–µ–¥–∏—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, source_or_reason), –≥–¥–µ:
      - ("pass", True) ‚Äî —Å–ø–∏—Å–∞–ª–∏ PASS
      - ("credit", True) ‚Äî —Å–ø–∏—Å–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç
      - (False, "pass_rate_limit") ‚Äî —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ (–∞–Ω—Ç–∏—Å–ø–∞–º PASS)
      - (False, "pass_day_limit") ‚Äî –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç PASS –∏—Å—á–µ—Ä–ø–∞–Ω
      - (False, "no_credits") ‚Äî –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤, PASS –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
      - (False, "pass_inactive") ‚Äî PASS –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω/–∏—Å—Ç—ë–∫ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ —Ç–æ–∂–µ –Ω–µ—Ç
    """
    if await pass_is_active(tg_id):
        ok, why, _ = await pass_can_spend(tg_id)
        if ok:
            await pass_register_spend(tg_id)
            return True, "pass"
        # –ï—Å–ª–∏ PASS –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ —É–ø—ë—Ä—Å—è –≤ –ª–∏–º–∏—Ç—ã ‚Äî —Å—Ä–∞–∑—É –¥–∞—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É,
        # –∞ –Ω–µ –º–æ–ª—á–∞ –ø–∞–¥–∞–µ–º –Ω–∞ –∫—Ä–µ–¥–∏—Ç—ã. –¢–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–µ–µ.
        if "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ" in (why or ""):
            return False, "pass_rate_limit"
        if "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç" in (why or ""):
            return False, "pass_day_limit"
        return False, "pass_inactive"

    # PASS –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ø–∏—Å–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        u = res.scalar_one_or_none()
        if not u or u.credits <= 0:
            return False, "no_credits"
        u.credits -= 1
        session.add(Transaction(user_id=u.id, type="spend", amount=1, status="success", meta={"reason": "credit_spend"}))
        await session.commit()
        return True, "credit"
