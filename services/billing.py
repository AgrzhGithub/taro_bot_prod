# services/billing.py
import os
import secrets
from typing import Optional, Dict, Any, Tuple
from datetime import datetime, timedelta, date

from sqlalchemy import select, and_, desc
from sqlalchemy.ext.asyncio import AsyncSession

from db import SessionLocal
from db.models import (
    User, PromoCode, PromoRedemption, Transaction,
    SubscriptionPass, PassUsage
)
from config import (
    DEFAULT_FREE_CREDITS,
    REFERRAL_BONUS_INVITED,
    REFERRAL_BONUS_REFERRER,
    PROMO_DEFAULT_CREDITS,
)


def pluralize_messages(n: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞ ¬´—Å–æ–æ–±—â–µ–Ω–∏–µ¬ª.
    –ü—Ä–∏–º–µ—Ä: 1 —Å–æ–æ–±—â–µ–Ω–∏–µ, 2 —Å–æ–æ–±—â–µ–Ω–∏—è, 5 —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    n = abs(int(n))
    if 11 <= (n % 100) <= 19:
        form = "—Å–æ–æ–±—â–µ–Ω–∏–π"
    else:
        last = n % 10
        if last == 1:
            form = "—Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif 2 <= last <= 4:
            form = "—Å–æ–æ–±—â–µ–Ω–∏—è"
        else:
            form = "—Å–æ–æ–±—â–µ–Ω–∏–π"
    return f"{n} {form}"

# =========================
# –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# =========================

def _gen_invite_code(length: int = 6) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞: –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –ª–∞—Ç–∏–Ω–∏—Ü—ã + —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    –í–∞–∂–Ω–æ: —Ä–µ–≥–∏—Å—Ç—Ä –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª '–∫–∞–∫ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'.
    """
    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    return "".join(secrets.choice(alphabet) for _ in range(length))


async def get_session() -> AsyncSession:
    return SessionLocal()


# =========================
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –±–∞–ª–∞–Ω—Å
# =========================

async def ensure_user(tg_id: int, username: Optional[str]) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π invite_code
    –∏ –≤—ã–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫—Ä–µ–¥–∏—Ç—ã DEFAULT_FREE_CREDITS (–µ–¥–∏–Ω—ã–π –±–∞–ª–∞–Ω—Å) + –ó–ê–õ–û–ì–ò–†–û–í–ê–¢–¨ –≠–¢–û.
    """
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        user = res.scalar_one_or_none()

        if user:
            if username and user.username != username:
                user.username = username
                await session.commit()
            return user

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
        code = _gen_invite_code()
        while True:
            exists = await session.execute(select(User).where(User.invite_code == code))
            if not exists.scalar_one_or_none():
                break
            code = _gen_invite_code()

        user = User(
            tg_id=tg_id,
            username=username,
            invite_code=code,                   # —É–∂–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            credits=DEFAULT_FREE_CREDITS,       # –µ–¥–∏–Ω—ã–π –±–∞–ª–∞–Ω—Å (–≤–∫–ª—é—á–∞—è 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö)
        )
        session.add(user)
        await session.commit()
        await session.refresh(user)

        # üëá –î–û–ë–ê–í–õ–ï–ù–û: –ª–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö (2) –≤ transactions
        if (DEFAULT_FREE_CREDITS or 0) > 0:
            session.add(Transaction(
                user_id=user.id,
                type="grant",
                amount=int(DEFAULT_FREE_CREDITS),
                status="success",
                meta={"reason": "welcome_bonus"}
            ))
            await session.commit()

        return user

async def get_user_balance(tg_id: int) -> int:
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        u = res.scalar_one_or_none()
        return 0 if not u else int(u.credits)


async def grant_credits(user_id: int, amount: int, reason: str, meta: Optional[Dict[str, Any]] = None):
    """
    –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (+ –ª–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏).
    """
    if amount <= 0:
        return
    async with SessionLocal() as session:
        u = await session.get(User, user_id)
        if not u:
            return
        u.credits += amount
        session.add(Transaction(
            user_id=user_id,
            type="grant",
            amount=amount,
            status="success",
            meta=(meta or {}) | {"reason": reason}
        ))
        await session.commit()


async def spend_one_credit(tg_id: int) -> bool:
    """
    –°–ø–∏—Å–∞—Ç—å 1 –∫—Ä–µ–¥–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ.
    """
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        u: Optional[User] = res.scalar_one_or_none()
        if not u or u.credits <= 0:
            return False
        u.credits -= 1
        session.add(Transaction(
            user_id=u.id,
            type="spend",
            amount=1,
            status="success",
            meta={"reason": "credit_spend"}
        ))
        await session.commit()
        return True


# =========================
# –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
# =========================

async def create_referral_promocode_for_user(owner: User) -> PromoCode:
    """
    –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ = –¢–ï–ö–£–©–ò–ô invite_code –≤–ª–∞–¥–µ–ª—å—Ü–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º–æ).
    –ï—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.
    """
    code_exact = owner.invite_code or ""
    async with SessionLocal() as session:
        res = await session.execute(select(PromoCode).where(PromoCode.code == code_exact))
        p = res.scalar_one_or_none()
        if p:
            return p

        promo = PromoCode(
            code=code_exact,
            is_referral=True,
            free_credits_award=REFERRAL_BONUS_INVITED,
            max_uses=None,   # –±–µ–∑–ª–∏–º–∏—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            used_count=0,
            created_by_user_id=owner.id,
        )
        session.add(promo)
        await session.commit()
        await session.refresh(promo)
        return promo


async def redeem_promocode(tg_id: int, code: str) -> Tuple[bool, str]:
    """
    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (–†–ï–ì–ò–°–¢–†–û–ó–ê–í–ò–°–ò–ú–û).
    –õ–æ–≥–∏–∫–∞:
      1) –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ PromoCode.code == –≤–≤–µ–¥—ë–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞.
      2) –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:
         - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å User.invite_code –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
         - –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–æ –∏ —ç—Ç–æ –ù–ï —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—ë–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ª–µ—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º.
      3) –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–∞–º–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—é (–Ω–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π invite_code/—Ä–µ—Ñ. –∫–æ–¥).
      4) –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∫–æ–¥–∞ –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
      5) –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –∏ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.
      6) –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é; –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ ‚Äî –±–æ–Ω—É—Å –≤–ª–∞–¥–µ–ª—å—Ü—É.
    """
    raw = (code or "").strip()
    if not raw:
        return False, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"

    async with SessionLocal() as session:
        # –ö—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç
        res_user = await session.execute(select(User).where(User.tg_id == tg_id))
        user = res_user.scalar_one_or_none()
        if not user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # 1) –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (case-sensitive)
        res_promo = await session.execute(select(PromoCode).where(PromoCode.code == raw))
        promo = res_promo.scalar_one_or_none()

        # 2) –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Ç–æ—á–Ω—ã–π –ª–∏ —ç—Ç–æ invite_code –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if not promo:
            res_owner = await session.execute(select(User).where(User.invite_code == raw))
            owner = res_owner.scalar_one_or_none()
            if owner:
                # –ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∂–µ –∫–æ–¥
                if owner.id == user.id:
                    return False, "–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥ üòä"
                # –°–æ–∑–¥–∞—ë–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ª–µ—Ç—É
                promo = await create_referral_promocode_for_user(owner)
            else:
                return False, "–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç"

        # 3) –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–∞–º–æ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Ñ. –∫–æ–¥–∞
        if promo.is_referral and promo.created_by_user_id == user.id:
            return False, "–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥ üòä"

        # 4) –ó–∞–ø—Ä–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –∂–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        res_red = await session.execute(
            select(PromoRedemption).where(
                and_(
                    PromoRedemption.user_id == user.id,
                    PromoRedemption.promocode_id == promo.id
                )
            )
        )
        if res_red.scalar_one_or_none():
            return False, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"

        # 5) –°—Ä–æ–∫/–ª–∏–º–∏—Ç—ã
        now = datetime.utcnow()
        if promo.expires_at and now > promo.expires_at:
            return False, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫"

        if promo.max_uses is not None and promo.used_count >= promo.max_uses:
            return False, "–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω"

        # 6) –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        award = promo.free_credits_award or PROMO_DEFAULT_CREDITS
        user.credits += award

        # –ë–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫)
        if promo.is_referral and promo.created_by_user_id:
            referrer = await session.get(User, promo.created_by_user_id)
            if referrer:
                referrer.credits += REFERRAL_BONUS_REFERRER
                session.add(Transaction(
                    user_id=referrer.id,
                    type="grant",
                    amount=REFERRAL_BONUS_REFERRER,
                    status="success",
                    meta={"reason": "referral_bonus", "code": promo.code}
                ))

        # –£—á—ë—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ + –ª–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ
        promo.used_count += 1
        session.add(PromoRedemption(user_id=user.id, promocode_id=promo.id))
        session.add(Transaction(
            user_id=user.id,
            type="grant",
            amount=award,
            status="success",
            meta={"reason": "promo_redeem", "code": promo.code}
        ))

        await session.commit()
        return True, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ {award} —Å–æ–æ–±—â–µ–Ω–∏–π üéâ"


def build_invite_link(invite_code: str) -> str:
    """
    Deep-link –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Å—Ç–∞–≤—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π @username –±–æ—Ç–∞.
    """
    return f"https://t.me/kartataro1_bot?start={invite_code}"


# =========================
# PASS (–ø–æ–¥–ø–∏—Å–∫–∞ ¬´–ø—Å–µ–≤–¥–æ–±–µ–∑–ª–∏–º–∏—Ç¬ª)
# =========================

PASS_DAYS = 30
DAY_LIMIT = int(os.getenv("PASS_DAY_LIMIT", 25))         # —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø–æ PASS
BURST_PER_MIN = int(os.getenv("PASS_BURST_PER_MIN", 2))  # –∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ N –≤ –º–∏–Ω—É—Ç—É


async def activate_pass_month(user_id: int, tg_id: int, plan: str = "pass_unlim") -> datetime:
    """
    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å PASS –Ω–∞ 30 –¥–Ω–µ–π (–±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤).
    """
    expires = datetime.utcnow() + timedelta(days=PASS_DAYS)
    async with SessionLocal() as s:
        res = await s.execute(select(SubscriptionPass).where(SubscriptionPass.user_id == user_id))
        sp = res.scalar_one_or_none()
        if sp:
            sp.expires_at = expires
            sp.plan = plan
        else:
            s.add(SubscriptionPass(user_id=user_id, tg_id=tg_id, plan=plan, expires_at=expires))
        await s.commit()
    return expires


async def _get_latest_active_pass_by_tg(tg_id: int):
    """
    –í–µ—Ä–Ω—É—Ç—å —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å PASS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–∂–µ –µ—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–∞).
    """
    async with SessionLocal() as s:
        q = (
            select(SubscriptionPass, User)
            .join(User, User.id == SubscriptionPass.user_id)
            .where(User.tg_id == tg_id)
            .order_by(desc(SubscriptionPass.expires_at))
        )
        res = await s.execute(q)
        return res.first()  # (SubscriptionPass, User) | None


async def pass_is_active(tg_id: int) -> bool:
    now = datetime.utcnow()
    row = await _get_latest_active_pass_by_tg(tg_id)
    if not row:
        return False
    sp, _user = row
    return bool(sp.expires_at and sp.expires_at >= now)


async def pass_can_spend(tg_id: int) -> Tuple[bool, str, Optional[int]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ PASS. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, why, used_today).
    """
    now = datetime.utcnow()
    today = now.date()

    row = await _get_latest_active_pass_by_tg(tg_id)
    if not row:
        return False, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", None

    sp, user = row
    if not sp.expires_at or sp.expires_at < now:
        return False, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫", None

    async with SessionLocal() as s:
        res2 = await s.execute(select(PassUsage).where(PassUsage.user_id == user.id, PassUsage.day == today))
        pu = res2.scalar_one_or_none()

        if pu:
            # –∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ BURST_PER_MIN —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
            min_interval = max(1, 60 / max(1, BURST_PER_MIN))
            if (now - pu.last_ts).total_seconds() < min_interval:
                return False, "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", pu.used
            if pu.used >= DAY_LIMIT:
                return False, f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω ({DAY_LIMIT}).", pu.used
            return True, "", pu.used

        # –µ—â—ë –Ω–µ —Ç—Ä–∞—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        return True, "", 0


async def pass_register_spend(tg_id: int) -> int:
    """
    –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ PASS –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ used.
    """
    now = datetime.utcnow()
    today = now.date()
    async with SessionLocal() as s:
        res = await s.execute(select(User).where(User.tg_id == tg_id))
        user = res.scalar_one_or_none()
        if not user:
            return 0

        res2 = await s.execute(select(PassUsage).where(PassUsage.user_id == user.id, PassUsage.day == today))
        pu = res2.scalar_one_or_none()
        if pu:
            pu.used += 1
            pu.last_ts = now
            used_now = pu.used
        else:
            pu = PassUsage(user_id=user.id, day=today, used=1, last_ts=now)
            s.add(pu)
            used_now = 1

        await s.commit()
        return used_now


async def spend_one_or_pass(tg_id: int) -> Tuple[bool, str]:
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å PASS (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –∏ –ª–∏–º–∏—Ç—ã –≤ –Ω–æ—Ä–º–µ).
    –ò–Ω–∞—á–µ ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º 1 –∫—Ä–µ–¥–∏—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º (ok, source_or_reason).
    –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:
      - (True,  "pass")            ‚Äî —Å–ø–∏—Å–∞–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
      - (True,  "credit")          ‚Äî —Å–ø–∏—Å–∞–Ω 1 –∫—Ä–µ–¥–∏—Ç
      - (False, "pass_rate_limit") ‚Äî —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ (–∞–Ω—Ç–∏—Å–ø–∞–º PASS)
      - (False, "pass_day_limit")  ‚Äî –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç PASS –∏—Å—á–µ—Ä–ø–∞–Ω
      - (False, "no_credits")      ‚Äî –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ (PASS –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)
      - (False, "pass_inactive")   ‚Äî PASS –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –ª–∏–º–∏—Ç—ã –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–ø–∏—Å–∞—Ç—å
    """
    if await pass_is_active(tg_id):
        ok, why, _ = await pass_can_spend(tg_id)
        if ok:
            await pass_register_spend(tg_id)
            return True, "pass"
        if "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ" in (why or ""):
            return False, "pass_rate_limit"
        if "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç" in (why or ""):
            return False, "pass_day_limit"
        return False, "pass_inactive"

    # PASS –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
    async with SessionLocal() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        u = res.scalar_one_or_none()
        if not u or u.credits <= 0:
            return False, "no_credits"
        u.credits -= 1
        session.add(Transaction(
            user_id=u.id,
            type="spend",
            amount=1,
            status="success",
            meta={"reason": "credit_spend"}
        ))
        await session.commit()
        return True, "credit"
