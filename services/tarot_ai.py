# services/tarot_ai.py
from __future__ import annotations

import os
import json
import random
import asyncio
import re
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import requests  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ asyncio.to_thread


# ===================== –ö–û–ù–§–ò–ì –Ø–ù–î–ï–ö–° LLM =====================
YANDEX_API_KEY     = os.getenv("YANDEX_API_KEY", "AQVN08pz8w3rwgGBwMpoZfsIwYH4CsIU2OzCOHzN").strip()
YANDEX_MODEL_URI   = os.getenv("YANDEX_MODEL_URI", "gpt://b1gvsrda7nthhjboi2hm/yandexgpt-lite").strip()
YANDEX_URL         = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
YANDEX_TEMPERATURE = float(os.getenv("YANDEX_TEMPERATURE", "0.7"))
YANDEX_MAX_TOKENS  = int(os.getenv("YANDEX_MAX_TOKENS", "2000"))


# ===================== –ö–û–ù–§–ò–ì –ü–ï–†–ï–í–Å–†–ù–£–¢–´–• –ö–ê–†–¢ =====================
# –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.
TAROT_ALLOW_REVERSED: bool = os.getenv("TAROT_ALLOW_REVERSED", "1").strip() not in {"0", "false", "False", ""}
try:
    TAROT_REVERSED_PROB: float = float(os.getenv("TAROT_REVERSED_PROB", "0.5"))
    TAROT_REVERSED_PROB = 0.0 if TAROT_REVERSED_PROB < 0 else (1.0 if TAROT_REVERSED_PROB > 1 else TAROT_REVERSED_PROB)
except ValueError:
    TAROT_REVERSED_PROB = 0.5


# ===================== –ö–ê–†–¢–´ =====================
CARDS_PATH = Path(__file__).resolve().parent.parent / "data" / "tarot_cards.json"

def load_cards() -> List[Dict[str, Any]]:
    with open(CARDS_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

_CARDS_CACHE: Optional[List[Dict[str, Any]]] = None

def _cards() -> List[Dict[str, Any]]:
    global _CARDS_CACHE
    if _CARDS_CACHE is None:
        _CARDS_CACHE = load_cards()
    return _CARDS_CACHE

def draw_cards(
    num: int,
    *,
    allow_reversed: Optional[bool] = None,
    reversed_prob: Optional[float] = None
) -> List[Dict[str, Any]]:
    """
    –í—ã—Ç—è–≥–∏–≤–∞–µ—Ç num –∫–∞—Ä—Ç –∏–∑ JSON-–∫–æ–ª–æ–¥—ã.
    –ù–ò–ß–ï–ì–û –Ω–µ –º–µ–Ω—è–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö: –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–µ –ø–æ–¥–º–µ–Ω—è–µ–º –ø–æ–ª–µ `name`
    –Ω–∞ "<–ò–º—è> (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)", –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ `base_name`.
    –í —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ä—Ç—ã —Ç–∞–∫–∂–µ –∫–ª–∞–¥—ë–º —Ñ–ª–∞–≥ `reversed: bool`.

    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
      - allow_reversed: None -> –±–µ—Ä—ë—Ç—Å—è –∏–∑ TAROT_ALLOW_REVERSED
      - reversed_prob: None -> –±–µ—Ä—ë—Ç—Å—è –∏–∑ TAROT_REVERSED_PROB
    """
    cards = _cards()
    if num > len(cards):
        raise ValueError(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {num} –∫–∞—Ä—Ç, –Ω–æ –≤ –∫–æ–ª–æ–¥–µ —Ç–æ–ª—å–∫–æ {len(cards)}")

    use_reversed = TAROT_ALLOW_REVERSED if allow_reversed is None else bool(allow_reversed)
    prob = TAROT_REVERSED_PROB if reversed_prob is None else max(0.0, min(1.0, float(reversed_prob)))

    picked = random.sample(cards, num)
    result: List[Dict[str, Any]] = []
    for c in picked:
        c = dict(c)  # –Ω–µ –ø–∞—á–∫–∞–µ–º –æ–±—â–∏–π –∫—ç—à
        base_name = c.get("name") or c.get("title") or str(c)
        c["base_name"] = base_name
        is_rev = use_reversed and (random.random() < prob)
        c["reversed"] = bool(is_rev)
        c["name"] = f"{base_name} (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)" if is_rev else base_name
        result.append(c)
    return result


# ===================== –•–ï–õ–ü–ï–†–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø =====================

def _force_itog_three_sentences_no_advice(text: str) -> str:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –±–ª–æ–∫ 'üåô –ò—Ç–æ–≥:' –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ:
    - —É–±–∏—Ä–∞–µ—Ç —Å–æ–≤–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏,
    - –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–æ–≤–Ω–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,
    - —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã.
    """
    if not isinstance(text, str) or not text.strip():
        return text

    text = _ensure_moon_on_itog(text)
    lines = text.splitlines()

    # –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "üåô –ò—Ç–æ–≥:"
    itog_idx = None
    for i, ln in enumerate(lines):
        if re.match(r"^\s*üåô\s*–ò—Ç–æ–≥\s*:\s*", ln, flags=re.IGNORECASE):
            itog_idx = i
            break
    if itog_idx is None:
        return text

    head = lines[:itog_idx]
    itog_header = lines[itog_idx]
    after_colon = re.split(r"üåô\s*–ò—Ç–æ–≥\s*:\s*", itog_header, flags=re.IGNORECASE)
    itog_inline = after_colon[1].strip() if len(after_colon) > 1 else ""
    tail = " ".join(s.strip() for s in lines[itog_idx + 1:] if s.strip())
    full_itog = f"{itog_inline} {tail}".strip()

    # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    full_itog = re.sub(r"\s{2,}", " ", full_itog)

    # —Ñ–∏–ª—å—Ç—Ä —Å–æ–≤–µ—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑
    banned = [
        "—Å–æ–≤–µ—Ç", "—Å–æ–≤–µ—Ç—É—é", "—Ä–µ–∫–æ–º–µ–Ω–¥", "—Å—Ç–æ–∏—Ç", "—Å–ª–µ–¥—É–µ—Ç", "–ª—É—á—à–µ",
        "–Ω—É–∂–Ω–æ", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", "–ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å", "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ", "—Å–¥–µ–ª–∞–π—Ç–µ",
        "–≤–æ–∑—å–º–∏—Ç–µ", "–¥–æ–ª–∂–Ω—ã", "–≤–∞–º —Å—Ç–æ–∏—Ç", "–≤–∞–º —Å–ª–µ–¥—É–µ—Ç", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é"
    ]
    sentences = re.split(r"(?<=[.!?])\s+", full_itog)
    clean_sentences = [s.strip() for s in sentences if s.strip() and not any(b in s.lower() for b in banned)]

    # –µ—Å–ª–∏ –±–æ–ª—å—à–µ —Ç—Ä—ë—Ö ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ ‚Äî –¥–æ–ø–æ–ª–Ω—è–µ–º
    clean_sentences = clean_sentences[:3]
    while len(clean_sentences) < 3:
        filler = "–°–∏—Ç—É–∞—Ü–∏—è —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ."
        clean_sentences.append(filler)

    # —Å–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        # —Å–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    joined = " ".join(s if s.endswith(('.', '!', '?')) else s + '.' for s in clean_sentences)
    joined = joined.strip()

    # —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    joined = re.sub(r"\s*\n\s*", " ", joined)
    joined = re.sub(r"\s{2,}", " ", joined)

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
    new_text = "\n".join(head + [f"üåô –ò—Ç–æ–≥: {joined}"])
    return new_text.strip()



def _sanitize_plain_text(text: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç –º–∞—Ä–∫–¥–∞—É–Ω –∏ –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ (*, -, ‚Ä¢ –∏ —Ç.–ø.), –æ—Å—Ç–∞–≤–ª—è—è –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–∏–¥–∞ '1) ...', '2) ...' ‚Äî –ø–æ—Ç–æ–º –º—ã –µ—ë –∑–∞–º–µ–Ω–∏–º –Ω–∞ ‚≠êÔ∏è.
    """
    if not isinstance(text, str):
        return text

    # —É–±–µ—Ä—ë–º –∂–∏—Ä–Ω—ã–π/–∫—É—Ä—Å–∏–≤ (**...**, *...*, __...__)
    text = text.replace("**", "").replace("__", "")

    # –ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
    cleaned_lines = []
    for line in text.splitlines():
        raw = line.lstrip()
        # —É–±–µ—Ä—ë–º markdown-–º–∞—Ä–∫–µ—Ä—ã
        for marker in ("* ", "- ", "‚Ä¢ ", "‚Äî ", "„Éª ", "‚àô ", "‚Üí ", "> "):
            if raw.startswith(marker):
                raw = raw[len(marker):]
                break
        if raw.startswith(("*‚Äî ", "*- ", "*‚Ä¢ ", "-‚Ä¢ ", "‚Ä¢- ")):
            raw = raw[2:].lstrip()
        cleaned_lines.append(raw)

    cleaned = "\n".join(cleaned_lines)
    cleaned = re.sub(r"\n{3,}", "\n\n", cleaned).strip()
    return cleaned


def _enforce_summary_no_advice(text: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç '–ò—Ç–æ–≥' —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∑—é–º–µ –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    –£–±–∏—Ä–∞–µ—Ç —Ñ—Ä–∞–∑—ã —Å —Ç–∏–ø–æ–≤—ã–º–∏ '—Å–æ–≤–µ—Ç–Ω—ã–º–∏' –º–∞—Ä–∫–µ—Ä–∞–º–∏ —Ç–æ–ª—å–∫–æ –≤ –±–ª–æ–∫–µ '–ò—Ç–æ–≥'.
    """
    if not isinstance(text, str):
        return text

    lines = text.splitlines()
    itog_idx = None
    for i, ln in enumerate(lines):
        low = ln.strip().lower()
        if low.startswith("–∏—Ç–æ–≥:") or low == "–∏—Ç–æ–≥" or low.startswith("üåô –∏—Ç–æ–≥"):
            itog_idx = i
            break
    if itog_idx is None:
        return text

    head = lines[:itog_idx+1]
    tail = lines[itog_idx+1:]
    tail_text = " ".join(s.strip() for s in tail if s.strip())
    if not tail_text:
        return text

    ADVICE_HINTS = [
        "—Å–æ–≤–µ—Ç", "—Å–æ–≤–µ—Ç—É—é", "—Ä–µ–∫–æ–º–µ–Ω–¥", "—Å—Ç–æ–∏—Ç", "—Å–ª–µ–¥—É–µ—Ç", "–ª—É—á—à–µ",
        "–Ω—É–∂–Ω–æ", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", "–ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å", "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ", "–ø–æ–ø—Ä–æ–±—É–π",
        "—Å–¥–µ–ª–∞–π—Ç–µ", "—Å–¥–µ–ª–∞–π", "–≤–æ–∑—å–º–∏—Ç–µ", "–±–µ—Ä–∏—Ç–µ", "–¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å",
        "–æ—Ñ–æ—Ä–º–∏—Ç–µ", "–ø–æ–ø—Ä–æ—Å–∏—Ç–µ", "–ø–µ—Ä–µ—Å—Ç–∞–Ω—å—Ç–µ", "–Ω–∞—á–Ω–∏—Ç–µ", "—É–¥–µ–ª–∏—Ç–µ",
        "—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å", "–ø–æ–¥—É–º–∞–π—Ç–µ", "–∏–∑–±–µ–≥–∞–π—Ç–µ", "–ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ",
        "–Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ", "–¥–µ—Ä–∂–∏—Ç–µ—Å—å", "–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ", "–¥–æ–±–µ–π—Ç–µ—Å—å"
    ]

    sentences = re.split(r"(?<=[\.\!\?])\s+", tail_text)
    cleaned = []
    for s in sentences:
        low = s.strip().lower()
        if low and not any(h in low for h in ADVICE_HINTS):
            cleaned.append(s.strip())

    if not cleaned:
        cleaned = ["–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∫–∞—Ä—Ç: —Å–æ–±—ã—Ç–∏—è –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –≤—ã—Ç–µ–∫–∞—é—â–∏–µ –∏–∑ —Ä–∞—Å–∫–ª–∞–¥–∞."]

    new_tail_text = " ".join(cleaned).strip()
    new_text = "\n".join(head + [new_tail_text])
    new_text = re.sub(r"\n{3,}", "\n\n", new_text).strip()
    return new_text


def _to_star_bullets(text: str) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –≤–µ–¥—É—â—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–∏–¥–∞ '1) ', '2. ', '3)  ' –Ω–∞ '‚≠êÔ∏è ' –¥–ª—è —Å—Ç—Ä–æ–∫ –∫–∞—Ä—Ç.
    –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∏–º–≤–æ–ª '‚òÖ ' –Ω–∞ '‚≠êÔ∏è '.
    """
    if not isinstance(text, str):
        return text
    lines = text.splitlines()
    out = []
    for ln in lines:
        s = ln.lstrip()
        if re.match(r"^\d+[\)\.]?\s+", s):
            ln = re.sub(r"^\s*\d+[\)\.]?\s+", "‚≠êÔ∏è ", ln)
        ln = re.sub(r"^\s*‚òÖ\s+", "‚≠êÔ∏è ", ln)
        out.append(ln)
    return "\n".join(out)


def _ensure_moon_on_itog(text: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ò—Ç–æ–≥–∞ –≤ –≤–∏–¥ 'üåô –ò—Ç–æ–≥:'.
    –£–¥–∞–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—É—é –≤–µ–¥—É—â—É—é ‚≠êÔ∏è –ø–µ—Ä–µ–¥ –ò—Ç–æ–≥–æ–º.
    """
    if not isinstance(text, str):
        return text

    lines = text.splitlines()
    for i, ln in enumerate(lines):
        base = ln.strip()
        if not base:
            continue
        # –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ –ò—Ç–æ–≥–∞
        if re.match(r"^(?:‚≠êÔ∏è\s*)?–ò—Ç–æ–≥\b", base, flags=re.IGNORECASE) or base.lower().startswith("üåô –∏—Ç–æ–≥"):
            m = re.match(r"^(?:\s*‚≠êÔ∏è\s*)?(?:üåô\s*)?–ò—Ç–æ–≥:?\s*(.*)$", ln, flags=re.IGNORECASE)
            rest = (m.group(1) if m else "").strip()
            lines[i] = ("üåô –ò—Ç–æ–≥:" + (f" {rest}" if rest else "")).rstrip()
            break
    return "\n".join(lines).strip()


def _prefix_paragraphs_with_stars_except_itog(text: str) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç '‚≠êÔ∏è ' –≤ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–π –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞,
    –ö–†–û–ú–ï —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ò—Ç–æ–≥–∞ ('üåô –ò—Ç–æ–≥:' / '–ò—Ç–æ–≥:').
    –ê–±–∑–∞—Ü—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
    """
    if not isinstance(text, str):
        return text

    paragraphs = re.split(r"\n\s*\n", text.strip(), flags=re.DOTALL)
    result: List[str] = []

    for p in paragraphs:
        lines = p.splitlines()
        for i, ln in enumerate(lines):
            if not ln.strip():
                continue
            # –µ—Å–ª–∏ —ç—Ç–æ –ò—Ç–æ–≥ ‚Äî –Ω–µ —Å—Ç–∞–≤–∏–º –∑–≤–µ–∑–¥—É –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞ –ª—É–Ω—É
            if re.match(r"^\s*(?:üåô\s*)?–ò—Ç–æ–≥\b", ln, flags=re.IGNORECASE):
                m = re.match(r"^\s*(?:üåô\s*)?–ò—Ç–æ–≥:?\s*(.*)$", ln, flags=re.IGNORECASE)
                rest = (m.group(1) if m else "").strip()
                lines[i] = ("üåô –ò—Ç–æ–≥:" + (f" {rest}" if rest else "")).rstrip()
                break
            # –∏–Ω–∞—á–µ ‚Äî –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≤–µ–¥—É—â—É—é –∑–≤–µ–∑–¥—É
            if not re.match(r"^\s*‚≠êÔ∏è\s+", ln):
                lines[i] = f"‚≠êÔ∏è {ln.lstrip()}"
            break
        result.append("\n".join(lines))

    return "\n\n".join(result).strip()


def _strip_star_prefixes(text: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç –ª—é–±—ã–µ –≤–µ–¥—É—â–∏–µ '‚≠êÔ∏è ' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ –∏ –ø–µ—Ä–µ–¥ '–ö–∞—Ä—Ç—ã:'.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ (—Ç–∞–º –∑–≤—ë–∑–¥ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ).
    """
    if not isinstance(text, str):
        return text
    lines = text.splitlines()
    cleaned = []
    for ln in lines:
        ln = re.sub(r"^\s*‚≠êÔ∏è\s+", "", ln)
        ln = re.sub(r"^\s*‚≠êÔ∏è\s*(–ö–∞—Ä—Ç—ã:)", r"\1", ln, flags=re.IGNORECASE)
        cleaned.append(ln)
    return "\n".join(cleaned).strip()


# ===================== –£–¢–ò–õ–ò–¢–ê –î–õ–Ø –°–¶–ï–ù–ê–†–ò–Ø =====================
def merge_with_scenario(base_prompt: str, scenario_ctx: Optional[str]) -> str:
    """–ü—Ä–æ—Å—Ç–æ —Å–∫–ª–µ–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —É—Ç–æ—á–Ω—è—é—â–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏."""
    return f"{base_prompt}\n\n{scenario_ctx}" if scenario_ctx else base_prompt


# ===================== –í–´–ó–û–í –Ø–ù–î–ï–ö–° LLM =====================
def _headers() -> Dict[str, str]:
    if not YANDEX_API_KEY:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω YANDEX_API_KEY (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è).")
    return {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
    }

def _build_prompt_payload(messages: List[Dict[str, str]], *, temperature: Optional[float] = None) -> Dict[str, Any]:
    return {
        "modelUri": YANDEX_MODEL_URI,
        "completionOptions": {
            "stream": False,
            "temperature": YANDEX_TEMPERATURE if temperature is None else float(temperature),
            "maxTokens": YANDEX_MAX_TOKENS,
        },
        "messages": messages,
    }

def _extract_text_from_response(data: Dict[str, Any]) -> str:
    try:
        alts = data["result"]["alternatives"]
        if alts:
            msg = alts[0].get("message", {})
            txt = msg.get("text")
            if isinstance(txt, str) and txt.strip():
                return txt.strip()
            txt2 = alts[0].get("text")
            if isinstance(txt2, str) and txt2.strip():
                return txt2.strip()
    except Exception:
        pass
    return json.dumps(data, ensure_ascii=False)

async def _post_messages(messages: List[Dict[str, str]], *, temperature: Optional[float] = None) -> str:
    payload = _build_prompt_payload(messages, temperature=temperature)

    def _do_request(headers):
        resp = requests.post(YANDEX_URL, headers=headers, json=payload, timeout=60)
        resp.raise_for_status()
        return resp.json()

    try:
        headers = _headers()
        data = await asyncio.to_thread(_do_request, headers)
        return _extract_text_from_response(data)
    except RuntimeError as e:
        return f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}"
    except requests.HTTPError as e:
        return f"–û—à–∏–±–∫–∞ HTTP: {e}"
    except requests.RequestException as e:
        return f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}"
    except Exception as e:
        return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

async def qwen_chat_completion(prompt: str) -> str:
    messages = [
        {"role": "system", "text": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥ —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."},
        {"role": "user", "text": prompt}
    ]
    return await _post_messages(messages)

async def qwen_chat_completion_messages(messages: List[Dict[str, str]], *, temperature: Optional[float] = None) -> str:
    return await _post_messages(messages, temperature=temperature)


# ===================== –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï =====================
async def gpt_make_prediction(
    question: str,
    theme: str,
    spread: str,
    cards_list: str,
    scenario_ctx: Optional[str] = None
) -> str:
    """
    –ñ—ë—Å—Ç–∫–æ –¥–µ—Ä–∂–∏–º —Ç–µ–º—É –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) —É—Ç–æ—á–Ω–µ–Ω–∏–µ.
    –ë–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω–∞. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç ‚Äî —Å–æ '‚≠êÔ∏è ' –≤–º–µ—Å—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏.
    –ê–±–∑–∞—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ '‚≠êÔ∏è ', –∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ò—Ç–æ–≥–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ 'üåô –ò—Ç–æ–≥:' (–±–µ–∑ –∑–≤–µ–∑–¥—ã).
    –ò—Ç–æ–≥ ‚Äî –†–û–í–ù–û 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤.
    """
    scenario_line = f"\n–£—Ç–æ—á–Ω—è—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_ctx}" if scenario_ctx else ""

    if theme.lower().startswith("–ª—é–±–æ–≤"):
        forbid = "—Ñ–∏–Ω–∞–Ω—Å—ã/–∫–∞—Ä—å–µ—Ä–∞/–∑–¥–æ—Ä–æ–≤—å–µ/—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"
        must = "–≥–æ–≤–æ—Ä–∏ –æ —á—É–≤—Å—Ç–≤–∞—Ö, –¥–∏–Ω–∞–º–∏–∫–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö –ø–∞—Ä—ã"
        tone = "—ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π, –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π"
    elif theme.lower().startswith("—Ä–∞–±–æ—Ç"):
        forbid = "–ª—é–±–æ–≤–Ω—ã–µ —Ç–µ–º—ã/–∑–¥–æ—Ä–æ–≤—å–µ/–æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –ø—Ä–æ ¬´–≤—Å–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏¬ª"
        must = "—Ñ–æ–∫—É—Å –Ω–∞ –∫–∞—Ä—å–µ—Ä–µ, —Ä–æ—Å—Ç–µ/–ø–æ–≤—ã—à–µ–Ω–∏–∏, KPI, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö, –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∑–∞—Å–ª—É–≥"
        tone = "–¥–µ–ª–æ–≤–æ–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π"
    elif theme.lower().startswith("—Å–∞–º–æ—Ä–∞–∑–≤"):
        forbid = "—É–∑–∫–∞—è –ª—é–±–æ–≤—å/—Ä–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–∞–∑–≤–∏—Ç–∏—é"
        must = "–ø—Ä–∏–≤—ã—á–∫–∏, –Ω–∞–≤—ã–∫–∏, –º—ã—à–ª–µ–Ω–∏–µ, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, —Ä–µ—Å—É—Ä—Å—ã"
        tone = "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π"
    else:
        forbid = "—É–∑–∫–∞—è –ª—é–±–æ–≤—å/—Ä–∞–±–æ—Ç–∞, –µ—Å–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –ø—É—Ç—ë–º"
        must = "–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∂–∏–∑–Ω–∏, –ª–∏—á–Ω—ã–µ —É—Ä–æ–∫–∏, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        tone = "–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π"

    prompt = f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫, —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –û–¥–∏–Ω —Å–≤—è–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.

–¢–µ–º–∞: {theme}{scenario_line}
–†–∞—Å–∫–ª–∞–¥: {spread}
–ö–∞—Ä—Ç—ã (–≤ –ø–æ—Ä—è–¥–∫–µ): {cards_list}
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ:
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: {must}.
- –ó–∞–ø—Ä–µ—â–µ–Ω–æ: {forbid}.
- –¢–æ–Ω: {tone}.

–§–æ—Ä–º–∞—Ç –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–±–∑–∞—Ü, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å "‚≠êÔ∏è ".
- –ü–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–æ–π 5‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –æ–±—ä—è—Å–Ω—è—è —Å–∏–º–≤–æ–ª–∏–∫—É –∏ —Å–º—ã—Å–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–µ–º—ã.
- –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è ‚Äî —á—ë—Ç–∫–æ —É–∫–∞–∂–∏ –≤–ª–∏—è–Ω–∏–µ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç–∏ (–æ—Å–ª–∞–±–ª–µ–Ω–∏–µ, –∏—Å–∫–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏ —Ç.–ø.).
- –ù–ò–ö–ê–ö–û–ì–û –º–∞—Ä–∫–¥–∞—É–Ω–∞/–±—É–ª–ª–µ—Ç–æ–≤: *, -, ‚Ä¢, ‚Äî, >, –∂–∏—Ä–Ω–æ–≥–æ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–∞.
- –ò—Ç–æ–≥ –≤—ã–≤–æ–¥–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–±–∑–∞—Ü–µ–º –∏ –Ω–∞—á–∏–Ω–∞–π —Å—Ç—Ä–æ–∫—É —Å "üåô –ò—Ç–æ–≥:" (–±–µ–∑ –∑–≤–µ–∑–¥—ã).
- üåô –ò—Ç–æ–≥ ‚Äî –†–û–í–ù–û 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –æ–±—â–µ–≥–æ –ø–æ—Å–ª–∞–Ω–∏—è –∫–∞—Ä—Ç, –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–æ–≤ (¬´–Ω—É–∂–Ω–æ¬ª, ¬´—Å–ª–µ–¥—É–µ—Ç¬ª, ¬´—Å–æ–≤–µ—Ç¬ª, ¬´–ø–æ–ø—Ä–æ–±—É–π—Ç–µ¬ª –∏ —Ç.–ø.).
""".strip()

    raw = await qwen_chat_completion(prompt)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –∫–∞–∫ –±—ã–ª–æ
    txt = _sanitize_plain_text(raw)
    txt = _enforce_summary_no_advice(txt)              # –º—è–≥–∫–∞—è —á–∏—Å—Ç–∫–∞ –æ—Ç —Å–æ–≤–µ—Ç–æ–≤
    txt = _to_star_bullets(txt)
    txt = _ensure_moon_on_itog(txt)
    txt = _prefix_paragraphs_with_stars_except_itog(txt)

    # –ñ–Å–°–¢–ö–û: —Ä–æ–≤–Ω–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤ –≤ –ò—Ç–æ–≥–µ
    txt = _force_itog_three_sentences_no_advice(txt)
    return txt




# ===================== –°–û–í–ï–¢–´ =====================
async def gpt_make_advice_from_yandex_answer(
    *,
    yandex_answer_text: str,
    advice_cards_list: List[str] | None,
    advice_count: int = 1,
) -> str:
    """
    –°–æ–≤–µ—Ç –ë–ï–ó –∑–≤—ë–∑–¥ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ –∏ –±–µ–∑ –¥—Ä—É–≥–∏—Ö —ç–º–æ–¥–∑–∏ –≤–Ω—É—Ç—Ä–∏.
    –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã) ‚Äî '–ö–∞—Ä—Ç—ã: ...' (–±–µ–∑ ‚≠êÔ∏è).
    –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω 'üîÆ'.
    """
    have_cards = bool(advice_cards_list)

    length_rule = (
        "–°–¥–µ–ª–∞–π —Å–≤—è–∑–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Å–æ–≤–µ—Ç –Ω–∞ 10‚Äì15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        if advice_count == 3 else
        "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
    )

    cards_line_for_prompt = f"–ö–∞—Ä—Ç—ã: {', '.join(advice_cards_list)}\n" if have_cards else ""

    prompt = f"""
–¢—ã ‚Äî —Ç–∞—Ä–æ–ª–æ–≥. –°—Ñ–æ—Ä–º–∏—Ä—É–π –ü–†–ê–ö–¢–ò–ß–ù–´–ô —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞ –Ω–∏–∂–µ.
–û–ø–∏—Ä–∞–π—Å—è –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –Ω–∞ —Ä–∞–∑–¥–µ–ª ¬´–ò—Ç–æ–≥¬ª –∏ –æ–±—â–∏–π —Å–º—ã—Å–ª –æ—Ç–≤–µ—Ç–∞.
–û–¥–∏–Ω –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.

{length_rule}

–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–∏–µ —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ (–Ω–∏–∫–∞–∫–∏—Ö ‚≠êÔ∏è, üîÆ –∏ —Ç.–ø.).
- –ù–ò–ö–ê–ö–û–ì–û –º–∞—Ä–∫–¥–∞—É–Ω–∞/–±—É–ª–ª–µ—Ç–æ–≤/–∂–∏—Ä–Ω–æ–≥–æ/–∫—É—Ä—Å–∏–≤–∞.
- –ï—Å–ª–∏ –µ—Å—Ç—å ¬´–∫–∞—Ä—Ç—ã —Å–æ–≤–µ—Ç–∞¬ª ‚Äî –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤—ã–≤–µ–¥–∏: "–ö–∞—Ä—Ç—ã: <...>" (–±–µ–∑ —ç–º–æ–¥–∑–∏).
- –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤—å –æ–¥–∏–Ω –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä: " üîÆ".

–í—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫:
{cards_line_for_prompt}<–¥–∞–ª—å—à–µ —Å—Ä–∞–∑—É –∏–¥—ë—Ç —Å–∞–º —Ç–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤>.

–û—Ç–≤–µ—Ç –Ø–Ω–¥–µ–∫—Å–∞:
---
{yandex_answer_text}
---
""".strip()

    raw = await qwen_chat_completion(prompt)
    text = _sanitize_plain_text(raw)
    text = re.sub(r"^\s*–¢–µ–∫—Å—Ç\s+—Å–æ–≤–µ—Ç–∞\s*:\s*", "", text, flags=re.IGNORECASE)

    # —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ø–∞–≤—à–∏–µ –∑–≤—ë–∑–¥—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
    text = _strip_star_prefixes(text)

    # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã –∏ –∏—Ö —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–∏–º –±–µ–∑ –∑–≤–µ–∑–¥—ã
    if have_cards and not text.lower().startswith("–∫–∞—Ä—Ç—ã:"):
        text = f"–ö–∞—Ä—Ç—ã: {', '.join(advice_cards_list)}\n\n{text.strip()}"

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —à–∞—Ä –≤ –∫–æ–Ω—Ü–µ
    text = text.rstrip()
    if not text.endswith("üîÆ"):
        text = f"{text} üîÆ"

    return text


async def gpt_make_advice(
    *,
    theme: str,
    scenario_ctx: Optional[str],
    question: str,
    cards_list: List[str],
    summary_text: str,
    advice_cards_list: List[str],
) -> str:
    """
    –°–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ë–ï–ó –∑–≤—ë–∑–¥ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫.
    –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã) ‚Äî '–ö–∞—Ä—Ç—ã: ...'. –í –∫–æ–Ω—Ü–µ ‚Äî –æ–¥–∏–Ω 'üîÆ'.
    """
    scenario_line = f"\n–£—Ç–æ—á–Ω–µ–Ω–∏–µ/—Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_ctx}" if scenario_ctx else ""
    prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –û–¥–∏–Ω –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.

–ó–∞–¥–∞—á–∞: –¥–∞—Ç—å –ü–†–ê–ö–¢–ò–ß–ù–´–ô —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –µ–≥–æ –ò—Ç–æ–≥–∞.
–û–ø–∏—Ä–∞–π—Å—è –Ω–∞ —Ç–µ–º—É/—É—Ç–æ—á–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞, –ò—Ç–æ–≥ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –°–æ–≤–µ—Ç–∞.

–§–æ—Ä–º–∞—Ç:
1) –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–µ—Å–ª–∏ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å): "–ö–∞—Ä—Ç—ã: <–∫–∞—Ä—Ç–∞1>, <–∫–∞—Ä—Ç–∞2>, ...".
2) –°—Ä–∞–∑—É –∑–∞ –Ω–µ–π ‚Äî —Å–∞–º —Ç–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞ 3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.

–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–∏–µ —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ (–Ω–∏–∫–∞–∫–∏—Ö ‚≠êÔ∏è, üîÆ –∏ —Ç.–ø.).
- –ù–ò–ö–ê–ö–û–ì–û –º–∞—Ä–∫–¥–∞—É–Ω–∞/–±—É–ª–ª–µ—Ç–æ–≤/–∂–∏—Ä–Ω–æ–≥–æ/–∫—É—Ä—Å–∏–≤–∞.
- –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤—å –æ–¥–∏–Ω –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä: " üîÆ".

–î–∞–Ω–Ω—ã–µ:
–¢–µ–º–∞: {theme}{scenario_line}
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}
–ö–∞—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ (–ø–æ –ø–æ—Ä—è–¥–∫—É): {", ".join(cards_list)}
–ò—Ç–æ–≥: {summary_text}
–ö–∞—Ä—Ç—ã –°–æ–≤–µ—Ç–∞: {", ".join(advice_cards_list)}
""".strip()

    raw = await qwen_chat_completion(prompt)
    text = _sanitize_plain_text(raw)
    text = re.sub(r"^\s*–¢–µ–∫—Å—Ç\s+—Å–æ–≤–µ—Ç–∞\s*:\s*", "", text, flags=re.IGNORECASE)

    # —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–≤–µ–∑–¥—ã –æ—Ç –º–æ–¥–µ–ª–∏
    text = _strip_star_prefixes(text)

    # –¥–æ–±–∞–≤–∏–º —Å—Ç—Ä–æ–∫—É ¬´–ö–∞—Ä—Ç—ã: ...¬ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–±–µ–∑ –∑–≤–µ–∑–¥—ã)
    if advice_cards_list and not text.lower().startswith("–∫–∞—Ä—Ç—ã:"):
        text = f"–ö–∞—Ä—Ç—ã: {', '.join(advice_cards_list)}\n\n{text.strip()}"

    # –æ–¥–∏–Ω —à–∞—Ä –≤ –∫–æ–Ω—Ü–µ
    text = text.rstrip()
    if not text.endswith("üîÆ"):
        text = f"{text} üîÆ"

    return text
