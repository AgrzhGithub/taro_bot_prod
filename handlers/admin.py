# handlers/admin.py
import os
import asyncio
from aiogram import Router, F
from aiogram.types import Message
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

import sys, subprocess
from aiogram.types import FSInputFile


from sqlalchemy import select
from db import SessionLocal
from db.models import User

from keyboards_inline import main_menu_inline
from services.billing import grant_credits, get_user_balance
from services.payments import (
    get_recent_uncredited,
    get_purchase_by_charge,
    mark_purchase_credited,
)

router = Router()

ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()}

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS


# ---------------------------
# –ü–æ–∫—É–ø–∫–∏ / —Ä—É—á–Ω–æ–µ –¥–æ–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ
# ---------------------------
@router.message(F.text.startswith("/purchases"))
async def cmd_purchases(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    parts = message.text.strip().split()
    limit = int(parts[1]) if len(parts) == 2 and parts[1].isdigit() else 10
    rows = await get_recent_uncredited(limit=limit)
    if not rows:
        await message.answer("–ù–µ—Ç –Ω–µ–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.")
        return
    lines = []
    for p in rows:
        rub = p.amount / 100
        lines.append(
            f"{p.created_at:%d.%m %H:%M} | uid={p.user_id}/tg={p.tg_id} | "
            f"{p.credits} –∫—Ä–µ–¥ | {rub:.2f} {p.currency} | {p.status} | {p.provider_charge_id or '-'}"
        )
    await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:\n" + "\n".join(lines))

@router.message(F.text.startswith("/recredit"))
async def cmd_recredit(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /recredit <provider_charge_id>")
        return
    charge_id = parts[1]
    p = await get_purchase_by_charge(charge_id)
    if not p:
        await message.answer("–ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if p.status == "credited":
        await message.answer("–≠—Ç–∞ –ø–æ–∫—É–ø–∫–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞.")
        return

    await grant_credits(
        p.user_id, p.credits,
        reason="admin_recredit",
        meta={"recredit_of": p.id, "charge_id": charge_id}
    )
    await mark_purchase_credited(p.id)
    bal = await get_user_balance(p.tg_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.tg_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {p.credits}. –ë–∞–ª–∞–Ω—Å: {bal}")


# ---------------------------
# –ê–¥–º–∏–Ω-—Ä–∞—Å—Å—ã–ª–∫–∞
# ---------------------------
@router.message(F.text.startswith("/push_menu"))
async def push_menu(message: Message):
    """–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + –º–µ–Ω—é.
       –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
         /push_menu                    -> –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
         /push_menu –í–∞—à —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å    -> –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    parts = message.text.split(maxsplit=1)
    notice_text = (
        parts[1].strip()
        if len(parts) > 1
        else "üîî –û–±–Ω–æ–≤–∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞: —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with SessionLocal() as s:
        res = await s.execute(select(User.tg_id))
        ids = [row[0] for row in res.all()]

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É. –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(ids)}")

    sent = 0
    failed = 0

    for uid in ids:
        try:
            # 1) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await message.bot.send_message(uid, notice_text)
            # 2) –º–µ–Ω—é
            await message.bot.send_message(uid, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())
            sent += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            failed += 1
        except Exception:
            failed += 1

        await asyncio.sleep(0.05)  # –º—è–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥

    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")


@router.message(F.text.startswith("/push_text"))
async def push_text(message: Message):
    """–†–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
       –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /push_text –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /push_text <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    text = parts[1]

    async with SessionLocal() as s:
        res = await s.execute(select(User.tg_id))
        ids = [row[0] for row in res.all()]

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Ç–µ–∫—Å—Ç–∞. –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(ids)}")

    sent = 0
    failed = 0
    for uid in ids:
        try:
            await message.bot.send_message(uid, text)
            sent += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            failed += 1
        except Exception:
            failed += 1
        await asyncio.sleep(0.05)

    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")

@router.message(F.text.startswith("/backup_now"))
async def backup_now(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    env = os.environ.copy()
    py = sys.executable or "python"

    try:
        proc = subprocess.run([py, "scripts/backup_db.py"], capture_output=True, text=True, env=env, timeout=120)
        if proc.returncode != 0:
            err = (proc.stderr or "Unknown error")[:1500]
            await message.answer(f"‚ùå –ë—ç–∫–∞–ø –Ω–µ —É–¥–∞–ª—Å—è:\n{err}")
            return

        # –∂–¥—ë–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: OK: <–ø—É—Ç—å –∫ zip>
        lines = [l.strip() for l in (proc.stdout or "").splitlines() if l.strip()]
        ok_line = next((l for l in lines if l.startswith("OK:")), None)
        if not ok_line:
            await message.answer("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ OK:. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
            return

        zip_path = ok_line.split("OK:", 1)[1].strip()
        await message.answer_document(FSInputFile(zip_path), caption="‚úÖ –ë—ç–∫–∞–ø –≥–æ—Ç–æ–≤")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {e}")
