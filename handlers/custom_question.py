from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from services.billing import spend_one_credit
from services.tarot_ai import draw_cards, gpt_make_prediction
from db import SessionLocal, models
from keyboards import main_menu, custom_question_keyboard

router = Router()

class CustomQuestionFSM(StatesGroup):
    waiting_for_question = State()


@router.message(F.text == "üìù –°–≤–æ–π –≤–æ–ø—Ä–æ—Å")
async def ask_custom_question(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=custom_question_keyboard)
    await state.set_state(CustomQuestionFSM.waiting_for_question)


@router.message(CustomQuestionFSM.waiting_for_question, F.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
async def to_main_menu(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º main_menu
    await state.clear()


@router.message(CustomQuestionFSM.waiting_for_question, F.text)
async def process_custom_question(message: Message, state: FSMContext):
    question = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    ok = await spend_one_credit(message.from_user.id)
    if not ok:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å üõí", reply_markup=main_menu)
        await state.clear()
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    cards = draw_cards(3)
    prediction = await gpt_make_prediction(question, cards)

    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
    async with SessionLocal() as session:
        log = models.SpreadLog(
            user_id=message.from_user.id,
            question=question,
            spread="custom",
            cards={"cards": cards},
            cost=1,
        )
        session.add(log)
        await session.commit()

    await message.answer(prediction, reply_markup=main_menu)
    await state.clear()