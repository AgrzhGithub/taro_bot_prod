from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards import main_menu
from services.billing import redeem_promocode, get_user_balance, ensure_user, build_invite_link, get_pass_status

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–í –º–µ–Ω—é"
promo_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

class PromoStates(StatesGroup):
    waiting_code = State()

@router.message(F.text == "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥")
async def ask_promo(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=promo_keyboard
    )
    await state.set_state(PromoStates.waiting_code)

@router.message(PromoStates.waiting_code)
async def redeem_promo(message: Message, state: FSMContext):
    code = (message.text or "").strip()
    if code == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        await state.clear()
        await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        return

    ok, info = await redeem_promocode(message.from_user.id, code)
    if ok:
        balance = await get_user_balance(message.from_user.id)
        await message.answer(
            f"{info}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Å–æ–æ–±—â–µ–Ω–∏–π",
            reply_markup=main_menu
        )
    else:
        await message.answer(info, reply_markup=promo_keyboard)
    await state.clear()

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    user = await ensure_user(message.from_user.id, message.from_user.username)
    balance = await get_user_balance(message.from_user.id)
    link = build_invite_link(user.invite_code)
    pass_line = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    active, until = await get_pass_status(message.from_user.id)
    if active:
        pass_line = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {until:%d.%m.%Y}"
    await message.answer(
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"ID: {user.tg_id}\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"üé´ {pass_line}\n\n"
        f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user.invite_code}\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n{link}",
        reply_markup=main_menu
    )

@router.message(F.text == "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def invite(message: Message):
    user = await ensure_user(message.from_user.id, message.from_user.username)
    link = build_invite_link(user.invite_code)
    await message.answer(
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥, –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å üéâ\n\n"
        f"{link}",
        reply_markup=main_menu
    )
