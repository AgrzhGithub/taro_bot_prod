# handlers/daily_card.py
import os
import re
import random
from pathlib import Path
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, FSInputFile,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError

from services.daily import (
    subscribe_daily, unsubscribe_daily, resolve_card_image,
    draw_random_card
)
from services.tarot_ai import gpt_make_prediction

router = Router()

# ---------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------
def _main_menu_kb():
    # –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from keyboards_inline import main_menu_inline
        return main_menu_inline()
    except Exception:
        # fallback
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")]
            ]
        )

def _daily_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóì –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É –¥–Ω—è", callback_data="daily:on")],
        [InlineKeyboardButton(text="‚è∞ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data="daily:time")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="daily:off")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")],
    ])

def _daily_time_kb():
    rows = []
    for i in range(7, 13, 3):
        row = list(range(i, min(i+3, 13)))
        rows.append(row)
    kb = []
    for row in rows:
        kb.append([
            InlineKeyboardButton(text=f"{h:02d}:01", callback_data=f"daily:time:{h}") for h in row
        ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:daily")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ---------------------------
# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π edit_text
# ---------------------------
async def _safe_edit(msg, text: str, **kwargs):
    try:
        return await msg.edit_text(text, **kwargs)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            return msg
        raise

# ---------------------------
# Inline-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
# ---------------------------
@router.callback_query(F.data == "menu:daily")
async def daily_menu(cb: CallbackQuery):
    await cb.answer()
    await _safe_edit(cb.message, "üóì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ ¬´–ö–∞—Ä—Ç—É –¥–Ω—è¬ª:", reply_markup=_daily_menu_kb())

@router.callback_query(F.data == "daily:on")
async def daily_on_cb(cb: CallbackQuery):
    await cb.answer()
    ok, msg = await subscribe_daily(cb.from_user.id)
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.callback_query(F.data == "daily:off")
async def daily_off_cb(cb: CallbackQuery):
    await cb.answer()
    ok, msg = await unsubscribe_daily(cb.from_user.id)
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.callback_query(F.data == "daily:time")
async def daily_time_menu(cb: CallbackQuery):
    await cb.answer()
    await _safe_edit(cb.message, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ¬´–ö–∞—Ä—Ç—É –¥–Ω—è¬ª:", reply_markup=_daily_time_kb())

@router.callback_query(F.data.startswith("daily:time:"))
async def daily_time_pick(cb: CallbackQuery):
    await cb.answer()
    try:
        hour = int(cb.data.split(":")[2])
    except Exception:
        hour = 9
    ok, msg = await subscribe_daily(cb.from_user.id, hour=hour, tz="Europe/Moscow")
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_daily_menu_kb())

# ---------------------------
# –ö–æ–º–∞–Ω–¥—ã (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# ---------------------------
@router.message(Command("card_daily_on"))
async def daily_on_cmd(message: Message):
    ok, msg = await subscribe_daily(message.from_user.id)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.message(Command("card_daily_off"))
async def daily_off_cmd(message: Message):
    ok, msg = await unsubscribe_daily(message.from_user.id)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.message(Command("card_daily_time"))
async def daily_time_cmd(message: Message):
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /card_daily_time <—á–∞—Å 0..23> [—Ç–∞–π–º–∑–æ–Ω–∞]\n–ù–∞–ø—Ä.: /card_daily_time 9 Europe/Moscow")
        return
    hour = parts[1]
    tz = parts[2] if len(parts) == 3 else "Europe/Moscow"
    try:
        h = int(hour)
    except Exception:
        await message.answer("–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 0..23")
        return
    ok, msg = await subscribe_daily(message.from_user.id, hour=h, tz=tz)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

# ---------------------------
# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–¥–∏–∞ (legacy): daily_card.*
# ---------------------------
def _resolve_daily_animation() -> str | None:
    """
    –î–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: –ò–©–ï–ú —Å—Ç—Ä–æ–≥–æ data/daily_card.gif|mp4|webm (–∫–∞–∫ —Ä–∞–Ω—å—à–µ).
    –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏—Å—ã–ª–∞–ª–æ—Å—å —Ç–æ –∂–µ –≤–∏–¥–µ–æ.
    """
    exts = (".gif", ".mp4", ".webm")
    # ./data/
    for ext in exts:
        p = os.path.join("data", f"daily_card{ext}")
        if os.path.exists(p):
            return p
    # ../data/ –æ—Ç handlers/
    here = os.path.dirname(os.path.abspath(__file__))
    root = os.path.abspath(os.path.join(here, ".."))
    for ext in exts:
        p = os.path.join(root, "data", f"daily_card{ext}")
        if os.path.exists(p):
            return p
    return None

async def _send_daily_media_with_caption(bot_or_msg, chat_id: int | None, caption: str) -> bool:
    """
    –î–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û –ñ–ï –°–ê–ú–û–ï –º–µ–¥–∏–∞ daily_card.* —Å –ø–æ–¥–ø–∏—Å—å—é.
    –ë–æ–ª—å—à–µ –ù–ï –¥–æ—Å—ã–ª–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–±–µ–∑ –¥—É–±–ª–µ–π).
    """
    path = _resolve_daily_animation()
    if not path:
        return False

    ext = os.path.splitext(path)[1].lower()
    f = FSInputFile(path)
    CAP = 1024
    cap = caption if len(caption) <= CAP else (caption[: CAP - 20].rstrip() + "‚Ä¶")

    try:
        # –ï—Å–ª–∏ —É –Ω–∞—Å Message ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º answer_*, –∏–Ω–∞—á–µ bot.send_*
        if hasattr(bot_or_msg, "answer_video"):
            if ext in (".mp4", ".webm"):
                await bot_or_msg.answer_video(f, caption=cap, supports_streaming=True, request_timeout=180)
            elif ext == ".gif":
                # –ì–∏—Ñ –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—è
                await bot_or_msg.answer_animation(f, caption=cap, request_timeout=180)
            else:
                await bot_or_msg.answer_document(f, caption=cap, request_timeout=180)
        else:
            bot = bot_or_msg
            if ext in (".mp4", ".webm"):
                await bot.send_video(chat_id, f, caption=cap, supports_streaming=True, request_timeout=180)
            elif ext == ".gif":
                await bot.send_animation(chat_id, f, caption=cap, request_timeout=180)
            else:
                await bot.send_document(chat_id, f, caption=cap, request_timeout=180)
        return True

    except TelegramNetworkError:
        # –§–æ–ª–±—ç–∫: –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        try:
            if hasattr(bot_or_msg, "answer_document"):
                await bot_or_msg.answer_document(FSInputFile(path), caption=cap, request_timeout=180)
            else:
                bot = bot_or_msg
                await bot.send_document(chat_id, FSInputFile(path), caption=cap, request_timeout=180)
            return True
        except Exception:
            return False
    except TelegramBadRequest:
        # –§–æ–ª–±—ç–∫: –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        try:
            if hasattr(bot_or_msg, "answer_document"):
                await bot_or_msg.answer_document(FSInputFile(path), caption=cap, request_timeout=180)
            else:
                bot = bot_or_msg
                await bot.send_document(chat_id, FSInputFile(path), caption=cap, request_timeout=180)
            return True
        except Exception:
            return False
    except Exception:
        return False

# ---------------------------
# –°–õ–£–ß–ê–ô–ù–û–ï –§–û–¢–û –¥–ª—è ¬´–ö–∞—Ä—Ç—ã –¥–Ω—è¬ª (–¢–û–õ–¨–ö–û —Ñ–æ—Ç–æ)
# ---------------------------

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û —Ñ–æ—Ç–æ-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
_PHOTO_EXTS = (".jpg", ".jpeg", ".png")

# –ü–∞–ø–∫–∏, –≥–¥–µ –∏—â–µ–º (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
_MEDIA_DIRS = [
    Path("data/daily_media"),
    Path("data/daily"),
    Path("data"),
]

_LAST_MEDIA_PATH: str | None = None  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –ø–æ–¥—Ä—è–¥ (–≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞)

def _collect_daily_photo_files() -> list[Path]:
    files: list[Path] = []
    for d in _MEDIA_DIRS:
        if d.is_dir():
            for p in d.iterdir():
                if p.is_file() and p.suffix.lower() in _PHOTO_EXTS:
                    files.append(p)
    # —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
    uniq = []
    seen = set()
    for p in files:
        k = str(p.resolve())
        if k not in seen:
            seen.add(k)
            uniq.append(p)
    return uniq

def _pick_random_daily_photo() -> str | None:
    global _LAST_MEDIA_PATH
    files = _collect_daily_photo_files()
    if not files:
        return None
    if len(files) == 1:
        choice = str(files[0].resolve())
        _LAST_MEDIA_PATH = choice
        return choice
    options = files[:]
    if _LAST_MEDIA_PATH:
        options = [p for p in files if str(p.resolve()) != _LAST_MEDIA_PATH] or files
    choice = str(random.choice(options).resolve())
    _LAST_MEDIA_PATH = choice
    return choice

# ---------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ ¬´–ö–∞—Ä—Ç—ã –¥–Ω—è¬ª
# ---------------------------
async def send_card_of_day(bot, chat_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å ¬´–ö–∞—Ä—Ç—É –¥–Ω—è¬ª —Å –ø–æ–¥–ø–∏—Å—å—é-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º –∏ –°–õ–£–ß–ê–ô–ù–´–ú –§–û–¢–û
    –∏–∑ data/daily_media|data/daily|data (—Ç–æ–ª—å–∫–æ jpg/jpeg/png).
    –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç ‚Äî —Ñ–æ–ª–±—ç–∫ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–∞–º–æ–π –∫–∞—Ä—Ç—ã (resolve_card_image) –∏–ª–∏ —Ç–µ–∫—Å—Ç.
    """
    card = draw_random_card()
    name = card.get("name") or card.get("title") or str(card)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    try:
        interpretation = await gpt_make_prediction(
            question="–ö–∞—Ä—Ç–∞ –¥–Ω—è",
            theme="–ö–∞—Ä—Ç–∞ –¥–Ω—è",
            spread="one-card",
            cards_list=name,
        )
    except Exception:
        interpretation = f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è: {name}.\n(–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.)"

    # –ù–µ–±–æ–ª—å—à–∞—è ¬´—á–∏—Å—Ç–∫–∞¬ª —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ ¬´–ò—Ç–æ–≥:¬ª
    interpretation_clean = re.sub(r'^\s*\d+[)\.]\s*', '', interpretation, flags=re.MULTILINE)
    interpretation_clean = interpretation_clean.replace("–ò—Ç–æ–≥:", "\n\n–ò—Ç–æ–≥:")

    caption = f"üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è\n\nüÉè {name}\n\n{interpretation_clean}"

    # 1) –ø—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –§–û–¢–û
    media_path = _pick_random_daily_photo()
    if media_path:
        try:
            await bot.send_photo(chat_id, FSInputFile(media_path), caption=caption)
            return
        except Exception:
            pass  # —É–ø–∞–¥—ë–º –≤ —Ñ–æ–ª–±—ç–∫ –Ω–∏–∂–µ

    # 2) Fallback ‚Äî –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç/–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–∞–º–æ–π –∫–∞—Ä—Ç—ã
    img_path = resolve_card_image(name)
    if img_path and os.path.exists(img_path):
        await bot.send_photo(chat_id, FSInputFile(img_path), caption=caption)
    else:
        # 3) –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await bot.send_message(chat_id, caption)

@router.message(Command("test_card"))
async def test_card_cmd(message: Message):
    await send_card_of_day(message.bot, message.chat.id)
