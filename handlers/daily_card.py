# handlers/daily_card.py
import os
import re
import json
import random
from pathlib import Path
from typing import Iterable

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, FSInputFile, InputFile,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError

from services.daily import (
    subscribe_daily, unsubscribe_daily, resolve_card_image,
    draw_random_card
)
from services.tarot_ai import gpt_make_prediction

router = Router()

# =========================
# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =========================
def _main_menu_kb():
    # –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from keyboards_inline import main_menu_inline
        return main_menu_inline()
    except Exception:
        # fallback
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")]
            ]
        )

def _daily_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóì –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É –¥–Ω—è", callback_data="daily:on")],
        [InlineKeyboardButton(text="‚è∞ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data="daily:time")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="daily:off")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")],
    ])

def _daily_time_kb():
    # –ø—Ä–æ—Å—Ç–∞—è —Å–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: 07:01, 08:01, ..., 12:01
    rows = []
    for i in range(7, 13, 3):
        row = list(range(i, min(i+3, 13)))
        rows.append(row)
    kb = []
    for row in rows:
        kb.append([
            InlineKeyboardButton(text=f"{h:02d}:00", callback_data=f"daily:time:{h}") for h in row
        ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:daily")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# =========================
# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π edit_text
# =========================
async def _safe_edit(msg, text: str, **kwargs):
    try:
        return await msg.edit_text(text, **kwargs)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            return msg
        raise

# =========================
# Inline-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
# =========================
@router.callback_query(F.data == "menu:daily")
async def daily_menu(cb: CallbackQuery):
    await cb.answer()
    await _safe_edit(cb.message, "üóì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ ¬´–ö–∞—Ä—Ç—É –¥–Ω—è¬ª:", reply_markup=_daily_menu_kb())

@router.callback_query(F.data == "daily:on")
async def daily_on_cb(cb: CallbackQuery):
    await cb.answer()
    ok, msg = await subscribe_daily(cb.from_user.id)
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.callback_query(F.data == "daily:off")
async def daily_off_cb(cb: CallbackQuery):
    await cb.answer()
    ok, msg = await unsubscribe_daily(cb.from_user.id)
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.callback_query(F.data == "daily:time")
async def daily_time_menu(cb: CallbackQuery):
    await cb.answer()
    await _safe_edit(cb.message, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ¬´–ö–∞—Ä—Ç—É –¥–Ω—è¬ª:", reply_markup=_daily_time_kb())

@router.callback_query(F.data.startswith("daily:time:"))
async def daily_time_pick(cb: CallbackQuery):
    await cb.answer()
    try:
        hour = int(cb.data.split(":")[2])
    except Exception:
        hour = 9
    ok, msg = await subscribe_daily(cb.from_user.id, hour=hour, tz="Europe/Moscow")
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_daily_menu_kb())

# =========================
# –ö–æ–º–∞–Ω–¥—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
# =========================
@router.message(Command("card_daily_on"))
async def daily_on_cmd(message: Message):
    ok, msg = await subscribe_daily(message.from_user.id)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.message(Command("card_daily_off"))
async def daily_off_cmd(message: Message):
    ok, msg = await unsubscribe_daily(message.from_user.id)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.message(Command("card_daily_time"))
async def daily_time_cmd(message: Message):
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /card_daily_time <—á–∞—Å 0..23> [—Ç–∞–π–º–∑–æ–Ω–∞]\n–ù–∞–ø—Ä.: /card_daily_time 9 Europe/Moscow")
        return
    hour = parts[1]
    tz = parts[2] if len(parts) == 3 else "Europe/Moscow"
    try:
        h = int(hour)
    except Exception:
        await message.answer("–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 0..23")
        return
    ok, msg = await subscribe_daily(message.from_user.id, hour=h, tz=tz)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

# =========================
# Legacy –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
# =========================
def _resolve_daily_animation() -> str | None:
    """
    –î–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: –∏—â–µ–º —Å—Ç—Ä–æ–≥–æ data/daily_card.gif|mp4|webm (–∫–∞–∫ —Ä–∞–Ω—å—à–µ).
    """
    exts = (".gif", ".mp4", ".webm")
    for ext in exts:
        p = os.path.join("data", f"daily_card{ext}")
        if os.path.exists(p):
            return p
    here = os.path.dirname(os.path.abspath(__file__))
    root = os.path.abspath(os.path.join(here, ".."))
    for ext in exts:
        p = os.path.join(root, "data", f"daily_card{ext}")
        if os.path.exists(p):
            return p
    return None

async def _send_daily_media_with_caption(bot_or_msg, chat_id: int | None, caption: str) -> bool:
    """
    –î–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û –ñ–ï –°–ê–ú–û–ï –º–µ–¥–∏–∞ daily_card.* —Å –ø–æ–¥–ø–∏—Å—å—é.
    """
    path = _resolve_daily_animation()
    if not path:
        return False

    ext = os.path.splitext(path)[1].lower()
    f = FSInputFile(path)
    CAP = 1024
    cap = caption if len(caption) <= CAP else (caption[: CAP - 20].rstrip() + "‚Ä¶")

    try:
        if hasattr(bot_or_msg, "answer_video"):
            if ext in (".mp4", ".webm"):
                await bot_or_msg.answer_video(f, caption=cap, supports_streaming=True, request_timeout=180)
            elif ext == ".gif":
                await bot_or_msg.answer_animation(f, caption=cap, request_timeout=180)
            else:
                await bot_or_msg.answer_document(f, caption=cap, request_timeout=180)
        else:
            bot = bot_or_msg
            if ext in (".mp4", ".webm"):
                await bot.send_video(chat_id, f, caption=cap, supports_streaming=True, request_timeout=180)
            elif ext == ".gif":
                await bot.send_animation(chat_id, f, caption=cap, request_timeout=180)
            else:
                await bot.send_document(chat_id, f, caption=cap, request_timeout=180)
        return True

    except (TelegramNetworkError, TelegramBadRequest):
        try:
            if hasattr(bot_or_msg, "answer_document"):
                await bot_or_msg.answer_document(FSInputFile(path), caption=cap, request_timeout=180)
            else:
                bot = bot_or_msg
                await bot.send_document(chat_id, FSInputFile(path), caption=cap, request_timeout=180)
            return True
        except Exception:
            return False
    except Exception:
        return False
    
    # === –†–∞–Ω–¥–æ–º–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –û–ë–´–ß–ù–´–• –†–ê–°–ö–õ–ê–î–û–í (–Ω–µ –∫–∞—Ä—Ç–∞ –¥–Ω—è) ===
async def _send_spread_media_with_caption(bot_or_msg, caption: str, reply_markup=None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ mp4/gif/webm –∏–∑ –ø–∞–ø–∫–∏ data/spreads/ —Å –ø–æ–¥–ø–∏—Å—å—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞; False ‚Äî –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç/–æ—à–∏–±–∫–∞.
    """
    try:
        import os, random
        from aiogram.types import FSInputFile

        folder = "data/spreads"
        if not os.path.isdir(folder):
            return False

        files = [f for f in os.listdir(folder) if f.lower().endswith((".mp4", ".gif", ".webm"))]
        if not files:
            return False

        path = os.path.join(folder, random.choice(files))
        f = FSInputFile(path)

        # –ø–æ–¥–ø–∏—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ ~1024 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç –Ω–∞ caption)
        CAP = 1024
        cap = caption if len(caption) <= CAP else (caption[: CAP - 20].rstrip() + "‚Ä¶")

        # –ï—Å–ª–∏ —ç—Ç–æ message/callback.message ‚Äî –µ—Å—Ç—å answer_*
        if hasattr(bot_or_msg, "answer_animation"):
            await bot_or_msg.answer_animation(f, caption=cap, reply_markup=reply_markup, request_timeout=180)
            return True
        if hasattr(bot_or_msg, "answer_video"):
            await bot_or_msg.answer_video(f, caption=cap, supports_streaming=True, reply_markup=reply_markup, request_timeout=180)
            return True

        # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ bot-–æ–±—ä–µ–∫—Ç ‚Äî –Ω—É–∂–µ–Ω chat_id (—Ç—É—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –ø—É—Ç—å –∏–∑ inline_flow)
        return False

    except Exception as e:
        print(f"[WARN] _send_spread_media_with_caption failed: {e}")
        return False


# =========================
# –ü–æ–¥–Ω–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è ¬´–ö–∞—Ä—Ç—ã –¥–Ω—è¬ª
# =========================
_ALLOWED_CARD_NAMES = [
    # --- –°—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã (—Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É, 16 —à—Ç.) ---
    "–®—É—Ç",
    "–ú–∞–≥",
    "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞",
    "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç",
    "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ",
    "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞",
    "–°–∏–ª–∞",
    "–°–æ–ª–Ω—Ü–µ",
    "–û—Ç—à–µ–ª—å–Ω–∏–∫",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã",
    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π",
    "–°–º–µ—Ä—Ç—å",
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",

    # --- –ñ–µ–∑–ª—ã ---
    "–¢—É–∑ –ñ–µ–∑–ª—ã", "3 –ñ–µ–∑–ª—ã", "10 –ñ–µ–∑–ª—ã",

    # --- –ö—É–±–∫–∏ ---
    "2 –ö—É–±–∫–∏", "3 –ö—É–±–∫–∏", "10 –ö—É–±–∫–∏",


    # --- –ú–µ—á–∏ ---
    "5 –ú–µ—á–∏", "3 –ú–µ—á–∏", "–ü–∞–∂ –ú–µ—á–∏",

    # --- –ü–µ–Ω—Ç–∞–∫–ª–∏ ---
    "–†—ã—Ü–∞—Ä—å –ü–µ–Ω—Ç–∞–∫–ª–∏", "–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª–∏", "9 –ü–µ–Ω—Ç–∞–∫–ª–∏",
]


# –≥–¥–µ –ª–µ–∂–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –∏ –∫–∞–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
_CARD_IMAGE_DIRS: list[Path] = [
    Path("data/cards"),
    Path("data/CARDS"),   # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    Path("data/–ö–∞—Ä—Ç—ã"),
]
_IMG_EXTS = (".jpg", ".jpeg", ".png", ".webp")

# =========================
# –ü–æ–∏—Å–∫/–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ –∫–∞—Ä—Ç
# =========================
def _norm_filename_base(card_name: str) -> str:
    """
    '–ü–∞–∂ –ñ–µ–∑–ª—ã' -> '–ü–∞–∂_–ñ–µ–∑–ª—ã'
    '10 –ü–µ–Ω—Ç–∞–∫–ª–∏' -> '10_–ü–µ–Ω—Ç–∞–∫–ª–∏'
    """
    name = (card_name or "").strip()
    name = re.sub(r"\s+", "_", name)  # –ø—Ä–æ–±–µ–ª—ã -> _
    name = re.sub(r"[^\w–ê-–Ø–∞-—è–Å—ë_0-9]", "", name)  # —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/_
    return name

def _candidate_basenames(card_name: str) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª.
    """
    exact = _norm_filename_base(card_name)
    cand = [exact]

    # —ë -> –µ
    noyo = exact.replace("—ë", "–µ").replace("–Å", "–ï")
    if noyo != exact:
        cand.append(noyo)

    # —Å–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
    if "__" in exact:
        cand.append(re.sub(r"_+", "_", exact))

    # —Å–æ–≤—Å–µ–º –±–µ–∑ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π
    if "_" in exact:
        cand.append(exact.replace("_", ""))

    # —Å–∫–ª–æ–Ω–µ–Ω–∏—è –º–∞—Å—Ç–µ–π (–Ω–∞ —Å–ª—É—á–∞–π —á—É–∂–∏—Ö —Ñ–∞–π–ª–æ–≤)
    repls = {"–ú–µ—á–∏": "–ú–µ—á–µ–π", "–ö—É–±–∫–∏": "–ö—É–±–∫–æ–≤", "–ñ–µ–∑–ª—ã": "–ñ–µ–∑–ª–æ–≤", "–ü–µ–Ω—Ç–∞–∫–ª–∏": "–ü–µ–Ω—Ç–∞–∫–ª–µ–π"}
    for src, dst in repls.items():
        if src in exact:
            cand.append(exact.replace(src, dst))

    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    out, seen = [], set()
    for c in cand:
        if c and c not in seen:
            seen.add(c)
            out.append(c)
    return out

def _iter_existing(paths: Iterable[Path]) -> Path | None:
    for p in paths:
        if p.is_file():
            return p
    return None

def find_card_image_path(card_name: str) -> str | None:
    """
    –ò—â–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ –∫–∞—Ç–∞–ª–æ–≥–∞–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º.
    1) —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
    2) –º—è–≥–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ stem.lower()
    3) fallback: resolve_card_image
    """
    basenames = _candidate_basenames(card_name)

    # (1) –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–±–æ—Ä
    for base in basenames:
        candidates = []
        for d in _CARD_IMAGE_DIRS:
            for ext in _IMG_EXTS:
                candidates.append((d / f"{base}{ext}").resolve())
        hit = _iter_existing(candidates)
        if hit:
            return str(hit)

    # (2) –º—è–≥–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä
    lowered_targets = [b.lower() for b in basenames]
    for d in _CARD_IMAGE_DIRS:
        if not d.is_dir():
            continue
        try:
            for p in d.iterdir():
                if p.is_file() and p.suffix.lower() in _IMG_EXTS:
                    if p.stem.lower() in lowered_targets:
                        return str(p.resolve())
        except Exception:
            continue

    # (3) fallback –∫ –≤–∞—à–µ–º—É —Ä–µ–∑–æ–ª–≤–µ—Ä—É
    try:
        p = resolve_card_image(card_name)
        if p and os.path.exists(p):
            return p
    except Exception:
        pass

    return None

# =========================
# –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç –∏ –≤—ã–±–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–Ω–∞–±–æ—Ä–∞
# =========================
def _load_tarot_list() -> list[dict]:
    for p in (Path("data/tarot_cards.json"), Path("tarot_cards.json")):
        if p.is_file():
            try:
                return json.loads(p.read_text("utf-8"))
            except Exception:
                pass
    return []

def _draw_random_card_limited() -> dict:
    """
    –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–ª—å–∫–æ –∏–∑ _ALLOWED_CARD_NAMES.
    –ï—Å–ª–∏ —Ñ–∞–π–ª JSON –Ω–µ –Ω–∞–π–¥–µ–Ω/–ø—É—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é draw_random_card().
    """
    all_cards = _load_tarot_list()
    if not all_cards:
        return draw_random_card()

    allowed_set = set(_ALLOWED_CARD_NAMES)
    filtered = []
    for it in all_cards:
        nm = (it.get("name") or it.get("title") or "").strip()
        if nm in allowed_set:
            filtered.append(it)

    if not filtered:
        return draw_random_card()

    return random.choice(filtered)

# =========================
# –û—Ç–ø—Ä–∞–≤–∫–∞ ¬´–ö–∞—Ä—Ç—ã –¥–Ω—è¬ª (–¢–û–õ–¨–ö–û —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã)
# =========================
async def send_card_of_day(bot, chat_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å ¬´–ö–∞—Ä—Ç—É –¥–Ω—è¬ª: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ò–ú–ï–ù–ù–û –≤—ã–ø–∞–≤—à–µ–π –∫–∞—Ä—Ç—ã + —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ.
    –ù–∏–∫–∞–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    card = _draw_random_card_limited()
    name = card.get("name") or card.get("title") or str(card)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    try:
        interpretation = await gpt_make_prediction(
            question="–ö–∞—Ä—Ç–∞ –¥–Ω—è",
            theme="–ö–∞—Ä—Ç–∞ –¥–Ω—è",
            spread="one-card",
            cards_list=name,
        )
    except Exception:
        interpretation = f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è: {name}.\n(–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.)"

    # –ù–µ–±–æ–ª—å—à–∞—è —á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ ¬´–ò—Ç–æ–≥:¬ª
    interpretation_clean = re.sub(r'^\s*\d+[)\.]\s*', '', interpretation, flags=re.MULTILINE)
    interpretation_clean = interpretation_clean.replace("–ò—Ç–æ–≥:", "\n\n–ò—Ç–æ–≥:")

    caption = f"üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è\n\nüÉè {name}\n\n{interpretation_clean}"

    img_path = find_card_image_path(name)
    if img_path:
        try:
            await bot.send_photo(chat_id, FSInputFile(img_path), caption=caption)
            return
        except Exception:
            pass  # –∫—Ä–∞–π–Ω–∏–π —Ñ–æ–ª–±—ç–∫ –Ω–∏–∂–µ

    await bot.send_message(chat_id, caption)

@router.message(Command("test_card"))
async def test_card_cmd(message: Message):
    await send_card_of_day(message.bot, message.chat.id)

# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# =========================
def _find_card_image_any(card_name: str) -> str | None:
    """
    –¢–æ—Ç –∂–µ –ø–æ–∏—Å–∫, —á—Ç–æ –≤ find_card_image_path, –Ω–æ –±–µ–∑ fallback –∫ resolve_card_image.
    –£–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ (–≤–∏–¥–Ω–æ, –∫–∞–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ data/cards).
    """
    basenames = _candidate_basenames(card_name)
    for base in basenames:
        for d in _CARD_IMAGE_DIRS:
            for ext in _IMG_EXTS:
                p = (d / f"{base}{ext}").resolve()
                if p.is_file():
                    return str(p)
    lowered = [b.lower() for b in basenames]
    for d in _CARD_IMAGE_DIRS:
        if not d.is_dir():
            continue
        for p in d.iterdir():
            if p.is_file() and p.suffix.lower() in _IMG_EXTS:
                if p.stem.lower() in lowered:
                    return str(p.resolve())
    return None

@router.message(Command("check_cards_images"))
async def check_cards_images_cmd(message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –í–°–ï–• 78 –∫–∞—Ä—Ç (–ø–æ data/tarot_cards.json).
    """
    tarot_list = _load_tarot_list()
    if not tarot_list:
        await message.answer("‚ùå –ù–µ –Ω–∞—à—ë–ª —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç: data/tarot_cards.json")
        return

    names = []
    for item in tarot_list:
        n = item.get("name") or item.get("title") or str(item)
        names.append(n.strip())

    missing = []
    found = []
    for name in names:
        hit = _find_card_image_any(name)
        if hit:
            found.append((name, hit))
        else:
            missing.append(name)

    total = len(names)
    have = len(found)
    miss = len(missing)

    text = (
        f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ–ª–Ω–∞—è –∫–æ–ª–æ–¥–∞)\n"
        f"–í—Å–µ–≥–æ –≤ –∫–æ–ª–æ–¥–µ: **{total}**\n"
        f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: **{have}**\n"
        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: **{miss}**\n"
    )
    if miss == 0:
        await message.answer(text + "\n‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ!")
        return

    report_path = Path("missing_cards.txt")
    report_path.write_text("\n".join(missing), encoding="utf-8")

    await message.answer(text + "\n‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö.")
    try:
        await message.answer_document(InputFile(str(report_path)))
    except Exception:
        await message.answer("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:\n" + "\n".join(missing[:50]) + ("\n‚Ä¶" if miss > 50 else ""))

@router.message(Command("check_cards_images_lite"))
async def check_cards_images_lite_cmd(message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–¥–Ω–∞–±–æ—Ä–∞ _ALLOWED_CARD_NAMES.
    """
    missing = []
    found = []
    for name in _ALLOWED_CARD_NAMES:
        hit = _find_card_image_any(name)
        if hit:
            found.append((name, hit))
        else:
            missing.append(name)

    total = len(_ALLOWED_CARD_NAMES)
    have = len(found)
    miss = len(missing)

    text = (
        f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ–¥–Ω–∞–±–æ—Ä –¥–ª—è –ö–∞—Ä—Ç—ã –¥–Ω—è)\n"
        f"–í –ø–æ–¥–Ω–∞–±–æ—Ä–µ: **{total}**\n"
        f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: **{have}**\n"
        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: **{miss}**\n"
    )
    if miss == 0:
        await message.answer(text + "\n‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ!")
        return

    report_path = Path("missing_cards_lite.txt")
    report_path.write_text("\n".join(missing), encoding="utf-8")

    await message.answer(text + "\n‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö (–ø–æ–¥–Ω–∞–±–æ—Ä).")
    try:
        await message.answer_document(InputFile(str(report_path)))
    except Exception:
        await message.answer("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:\n" + "\n".join(missing[:50]) + ("\n‚Ä¶" if miss > 50 else ""))
