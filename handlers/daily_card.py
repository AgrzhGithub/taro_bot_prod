# handlers/daily_card.py
import os
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, FSInputFile,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from services.daily import (
    subscribe_daily, unsubscribe_daily, resolve_card_image,
    draw_random_card
)
from services.tarot_ai import gpt_make_prediction

router = Router()

# ---------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------
def _main_menu_kb():
    # –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from keyboards_inline import main_menu_inline
        return main_menu_inline()
    except Exception:
        # fallback
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")]
            ]
        )

def _daily_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóì –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É –¥–Ω—è", callback_data="daily:on")],
        [InlineKeyboardButton(text="‚è∞ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data="daily:time")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="daily:off")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")],
    ])

def _daily_time_kb():
    # –ù–∞–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —á–∞—Å–æ–≤. –ú–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.
    rows = [
        [8, 9, 10],
        [12, 18, 21],
        [7, 11, 20]
    ]
    kb = []
    for row in rows:
        kb.append([
            InlineKeyboardButton(text=f"{h:02d}:00", callback_data=f"daily:time:{h}") for h in row
        ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:daily")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ---------------------------
# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π edit_text
# ---------------------------
async def _safe_edit(msg, text: str, **kwargs):
    try:
        return await msg.edit_text(text, **kwargs)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            return msg
        raise

# ---------------------------
# Inline-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
# ---------------------------
@router.callback_query(F.data == "menu:daily")
async def daily_menu(cb: CallbackQuery):
    await cb.answer()
    await _safe_edit(cb.message, "üóì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ ¬´–ö–∞—Ä—Ç—É –¥–Ω—è¬ª:", reply_markup=_daily_menu_kb())

@router.callback_query(F.data == "daily:on")
async def daily_on_cb(cb: CallbackQuery):
    await cb.answer()
    ok, msg = await subscribe_daily(cb.from_user.id)
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.callback_query(F.data == "daily:off")
async def daily_off_cb(cb: CallbackQuery):
    await cb.answer()
    ok, msg = await unsubscribe_daily(cb.from_user.id)
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.callback_query(F.data == "daily:time")
async def daily_time_menu(cb: CallbackQuery):
    await cb.answer()
    await _safe_edit(cb.message, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ¬´–ö–∞—Ä—Ç—É –¥–Ω—è¬ª:", reply_markup=_daily_time_kb())

@router.callback_query(F.data.startswith("daily:time:"))
async def daily_time_pick(cb: CallbackQuery):
    await cb.answer()
    try:
        hour = int(cb.data.split(":")[2])
    except Exception:
        hour = 9
    ok, msg = await subscribe_daily(cb.from_user.id, hour=hour, tz="Europe/Moscow")
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—Ä–Ω—ë–º—Å—è –≤ –º–µ–Ω—é ¬´–ö–∞—Ä—Ç–∞ –¥–Ω—è¬ª
    await _safe_edit(cb.message, ("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_daily_menu_kb())

# ---------------------------
# –ö–æ–º–∞–Ω–¥—ã (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# ---------------------------
@router.message(Command("card_daily_on"))
async def daily_on_cmd(message: Message):
    ok, msg = await subscribe_daily(message.from_user.id)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.message(Command("card_daily_off"))
async def daily_off_cmd(message: Message):
    ok, msg = await unsubscribe_daily(message.from_user.id)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

@router.message(Command("card_daily_time"))
async def daily_time_cmd(message: Message):
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /card_daily_time <—á–∞—Å 0..23> [—Ç–∞–π–º–∑–æ–Ω–∞]\n–ù–∞–ø—Ä.: /card_daily_time 9 Europe/Moscow")
        return
    hour = parts[1]
    tz = parts[2] if len(parts) == 3 else "Europe/Moscow"
    try:
        h = int(hour)
    except Exception:
        await message.answer("–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 0..23")
        return
    ok, msg = await subscribe_daily(message.from_user.id, hour=h, tz=tz)
    await message.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg, reply_markup=_main_menu_kb())

# ---------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ ¬´–ö–∞—Ä—Ç—ã –¥–Ω—è¬ª
# ---------------------------
async def send_card_of_day(bot, chat_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).
    –ö–∞—Ä—Ç–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ data/tarot_cards.json —á–µ—Ä–µ–∑ draw_random_card().
    """
    card = draw_random_card()
    name = card.get("name") or card.get("title") or str(card)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    try:
        interpretation = await gpt_make_prediction(
            question="–ö–∞—Ä—Ç–∞ –¥–Ω—è",
            theme="–ö–∞—Ä—Ç–∞ –¥–Ω—è",
            spread="one-card",
            cards_list=name,
        )
    except Exception:
        interpretation = f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è: {name}.\n(–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.)"

    caption = f"üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è\n\nüÉè {name}\n\n{interpretation}"

    img_path = resolve_card_image(name)
    if img_path and os.path.exists(img_path):
        await bot.send_photo(chat_id, FSInputFile(img_path), caption=caption)
    else:
        await bot.send_message(chat_id, caption)
