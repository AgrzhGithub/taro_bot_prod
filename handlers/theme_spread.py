# handlers/theme_spread.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from services.billing import spend_one_credit
from services.tarot_ai import draw_cards, gpt_make_prediction
from db import SessionLocal, models
from keyboards import theme_keyboard, spread_keyboard, main_menu

router = Router()


class ThemeChoice(StatesGroup):
    choosing_theme = State()
    choosing_spread = State()


@router.message(F.text == "üóÇ –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É")
async def choose_theme(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=theme_keyboard)
    await state.set_state(ThemeChoice.choosing_theme)


# === choosing_theme ===
@router.message(ThemeChoice.choosing_theme, F.text == "–ù–∞–∑–∞–¥")
async def back_to_main_from_theme(message: Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    await state.clear()


@router.message(ThemeChoice.choosing_theme, F.text == "–í –º–µ–Ω—é")
async def to_main_menu_from_theme(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    await state.clear()


@router.message(ThemeChoice.choosing_theme, F.text.not_in(["–ù–∞–∑–∞–¥", "–í –º–µ–Ω—é"]))
async def process_theme_choice(message: Message, state: FSMContext):
    theme = message.text.strip()
    await state.update_data(theme=theme)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=spread_keyboard)
    await state.set_state(ThemeChoice.choosing_spread)


# === choosing_spread ===
@router.message(ThemeChoice.choosing_spread, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_theme(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=theme_keyboard)
    await state.set_state(ThemeChoice.choosing_theme)


@router.message(ThemeChoice.choosing_spread, F.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
async def to_main_menu_from_spread(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    await state.clear()


@router.message(ThemeChoice.choosing_spread, F.text.not_in(["üîô –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è –í –º–µ–Ω—é"]))
async def process_spread_choice(message: Message, state: FSMContext):
    data = await state.get_data()
    theme = data.get("theme")
    spread = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    ok = await spend_one_credit(message.from_user.id)
    if not ok:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å üõí", reply_markup=main_menu)
        await state.clear()
        return

    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –ø–æ —Ç–∏–ø—É —Ä–∞—Å–∫–ª–∞–¥–∞
    if spread == "–¢—Ä–∏ –∫–∞—Ä—Ç—ã":
        cards = draw_cards(3)
    elif spread == "–ü–æ–¥–∫–æ–≤–∞":
        cards = draw_cards(7)
    elif spread == "–ê–ª—Ö–∏–º–∏–∫":
        cards = draw_cards(4)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥.", reply_markup=main_menu)
        await state.clear()
        return

    prediction = await gpt_make_prediction(f"–¢–µ–º–∞: {theme}", cards)

    # –õ–æ–≥ –≤ –ë–î
    async with SessionLocal() as session:
        log = models.SpreadLog(
            user_id=message.from_user.id,
            theme=theme,
            spread=spread,
            cards={"cards": cards},
            cost=1,
        )
        session.add(log)
        await session.commit()

    await message.answer(prediction, reply_markup=main_menu)
    await state.clear()
