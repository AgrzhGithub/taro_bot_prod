# handlers/inline_flow.py
from __future__ import annotations

from aiogram.enums import ChatAction
import contextlib
from services import tarot_ai
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardRemove, PreCheckoutQuery, LabeledPrice,
    InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
from typing import List
import os
import re
import asyncio
from datetime import datetime, date

from sqlalchemy import select

from keyboards_inline import (
    main_menu_inline, theme_inline, spread_inline, buy_inline, back_to_menu_inline,
    promo_inline, advice_inline_limits, advice_pack_buy_inline,
)
from config import ADMIN_USERNAME
from services.tarot_ai import draw_cards, gpt_make_prediction, merge_with_scenario, gpt_make_advice_from_yandex_answer
from services.billing import (
    ensure_user, get_user_balance, redeem_promocode,
    build_invite_link, grant_credits, activate_pass_month,
    spend_one_or_pass,
    pass_is_active,
    spend_one_advice,
    get_advice_balance_by_tg_id,
    pluralize_advices,
)
from handlers.daily_card import _send_daily_media_with_caption, _send_spread_media_with_caption
from services.payments import create_purchase, mark_purchase_credited
from db import SessionLocal, models

router = Router()


# ---------- FSM ----------
class PromoFSM(StatesGroup):
    waiting_code = State()


class CustomFSM(StatesGroup):
    waiting_question = State()


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def _card_names(cards) -> list[str]:
    names = []
    for c in cards:
        if isinstance(c, str):
            names.append(c)
        elif isinstance(c, dict):
            names.append(c.get("name") or c.get("title") or c.get("ru") or c.get("en") or str(c))
        else:
            names.append(str(c))
    return names

@contextlib.asynccontextmanager
async def typing_action(bot: Bot, chat_id: int, interval: float = 4.0):
    stop = False
    async def _loop():
        while not stop:
            with contextlib.suppress(Exception):
                await bot.send_chat_action(chat_id, ChatAction.TYPING)
            await asyncio.sleep(interval)
    task = asyncio.create_task(_loop())
    try:
        yield
    finally:
        nonlocal_stop = True  # –º–µ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        stop = True
        task.cancel()
        with contextlib.suppress(Exception):
            # –ù–ï await task ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤–∏—Å–Ω—É—Ç—å –Ω–∞ CancelledError
            pass


def _format_date_human(val) -> str:
    if isinstance(val, (datetime, date)):
        return val.strftime("%d.%m.%Y")
    if isinstance(val, str):
        try:
            return datetime.fromisoformat(val).strftime("%d.%m.%Y")
        except Exception:
            return val
    return str(val)


async def _get_pass_expiry_by_tg(tg_id: int):
    async with SessionLocal() as s:
        q = (
            select(models.SubscriptionPass.expires_at)
            .join(models.User, models.User.id == models.SubscriptionPass.user_id)
            .where(models.User.tg_id == tg_id)
            .order_by(models.SubscriptionPass.expires_at.desc())
        )
        res = await s.execute(q)
        return res.scalar_one_or_none()


def _extract_itog(text: str) -> str:
    if not text:
        return ""
    lines = text.splitlines()
    itog_idx = next((i for i, line in enumerate(lines) if line.strip().lower().startswith("–∏—Ç–æ–≥")), None)
    if itog_idx is None:
        itog_idx = next((i for i, line in enumerate(lines) if "–∏—Ç–æ–≥" in line.strip().lower()), None)
    if itog_idx is None:
        return ""
    tail = [s for s in lines[itog_idx+1:] if s.strip()]
    return " ".join(tail).strip()


def _get_message_text(msg: Message) -> str:
    return (msg.text or msg.caption or "").strip()


async def _edit_text_or_caption(msg: Message, text: str, reply_markup=None) -> bool:
    try:
        if getattr(msg, "photo", None) or getattr(msg, "video", None) or getattr(msg, "animation", None) or getattr(msg, "document", None):
            await msg.edit_caption(text, reply_markup=reply_markup)
        else:
            await msg.edit_text(text, reply_markup=reply_markup)
        return True
    except TelegramBadRequest:
        await msg.answer(text, reply_markup=reply_markup)
        return False

# --- –ò–Ω–¥–∏–∫–∞—Ü–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç..." –≤–æ –≤—Ä–µ–º—è –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ---
@contextlib.asynccontextmanager
async def typing_action(bot, chat_id: int, interval: float = 4.0):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —à–ª—ë—Ç ChatAction.TYPING, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–ª–æ–∫ –≤–Ω—É—Ç—Ä–∏ with.
    –ë–µ–∑ await task –ø–æ—Å–ª–µ cancel(), —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å.
    """
    stop = False
    async def _loop():
        while not stop:
            with contextlib.suppress(Exception):
                await bot.send_chat_action(chat_id, ChatAction.TYPING)
            await asyncio.sleep(interval)
    task = asyncio.create_task(_loop())
    try:
        yield
    finally:
        stop = True
        task.cancel()



# --- –ù–∞–¥—ë–∂–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º + –ò—Ç–æ–≥ ---
_CARD_BLOCK_RE = re.compile(
    r'^\s*(–ö–∞—Ä—Ç–∞:\s*(?P<title>.+?))\s*(?:\r?\n)+(?P<body>.*?)(?=^\s*–ö–∞—Ä—Ç–∞:|\Z)',
    re.S | re.M
)

def split_card_blocks_and_itog(text: str):
    text = (text or "").strip()
    blocks = []
    for m in _CARD_BLOCK_RE.finditer(text):
        blocks.append({
            "title": m.group("title").strip(),  # "–ö–∞—Ä—Ç–∞: XXX" –±–µ–∑ —Å–ª–æ–≤–∞ "–ö–∞—Ä—Ç–∞:"
            "body":  m.group("body").strip()
        })

    # –ò—Ç–æ–≥ –≤—ã–Ω–∏–º–∞–µ–º —Å–Ω–∏–∑—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    itog_match = re.search(r'^\s*–ò—Ç–æ–≥[:\s]*\r?\n(?P<itog>.*)\Z', text, re.S | re.I | re.M)
    if itog_match:
        itog = itog_match.group("itog").strip()
    else:
        itog = _extract_itog(text)

    return blocks, itog


# ---------- –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ ----------
def _advice_back_kb(allow_three: bool = True) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    rows.append([InlineKeyboardButton(text="üß≠ –û–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç (1 –∫–∞—Ä—Ç–∞)", callback_data="advice:1")])
    if allow_three:
        rows.append([InlineKeyboardButton(text="üîÆ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç (3 –∫–∞—Ä—Ç—ã)", callback_data="advice:3")])
    rows.append([InlineKeyboardButton(text="üîÅ –ï—â—ë –ø–æ —Å–ø–∏—Å–∫—É", callback_data="menu:theme")])
    rows.append([InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="nav:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ---------- —Å—Ç–∞—Ä—Ç/–º–µ–Ω—é/—Ö–µ–ª–ø ----------
@router.message(CommandStart())
async def start_inline(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    welcome1 = (
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä –¢–∞—Ä–æ!\n\n"
        "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∞ –í–∞—à –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –¢–∞—Ä–æ. "
        "–ü–æ–º–æ—â–Ω–∏–∫, –æ–±—É—á–µ–Ω–Ω—ã–π –Ω–∞ –ª—É—á—à–∏—Ö –∫–Ω–∏–≥–∞—Ö –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö –ø–æ –∫–∞—Ä—Ç–∞–º –¢–∞—Ä–æ.\n\n"
        "‚ú® –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–≥–∏—è:\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π –ø–æ–∫–æ—è. –°–¥–µ–ª–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö, "
        "–æ—Ç–ø—É—Å—Ç–∏—Ç–µ —Ç—Ä–µ–≤–æ–≥–∏ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏. –ß–µ–º —Å–ø–æ–∫–æ–π–Ω–µ–µ –±—É–¥–µ—Ç –≤–∞—à —Ä–∞–∑—É–º, —Ç–µ–º —è—Å–Ω–µ–µ –∑–∞–≥–æ–≤–æ—Ä—è—Ç –∫–∞—Ä—Ç—ã.\n"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É: –ª—é–±–æ–≤—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –±—É–¥—É—â–µ–µ, —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –∏–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.\n"
        "2) –Ø —Ä–∞—Å–∫—Ä–æ—é –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –∫–∞—Ä—Ç—ã ‚Äî –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ç—Ä—ë—Ö–∫–∞—Ä—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–æ –¥—Ä–µ–≤–Ω–∏—Ö —Å—Ö–µ–º –≤—Ä–æ–¥–µ ¬´–ü–æ–¥–∫–æ–≤—ã¬ª –∏–ª–∏ ¬´–ê–ª—Ö–∏–º–∏–∫–∞¬ª.\n"
        "3) –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ¬´–ò—Ç–æ–≥¬ª ‚Äî —Å—É—Ç—å –ø–æ—Å–ª–∞–Ω–∏—è –∫–∞—Ä—Ç. "
        "–ê –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ–≥–æ, –µ—Å—Ç—å \n"
        "‚ú®–°–æ–≤–µ—Ç—ã: –æ–¥–Ω–∞ –∏–ª–∏ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∂—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
    )

    welcome2 = (
        "üåô –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Äî ¬´üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è¬ª ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Å–æ–±—É—é –∫–∞—Ä—Ç—É, "
        "–∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞—ë—Ç —Ç–æ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞—à–µ–º—É –ø—É—Ç–∏. "
        "–° –Ω–µ–π –º–æ–∂–Ω–æ –ø—Ä–æ–∂–∏—Ç—å –¥–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ —É–≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å—É–¥—å–±—ã.\n\n"
        "üíé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n"
        "‚Äî –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥.\n"
        "‚Äî –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–≤–µ—Ç–∞–º –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é "
        "–≤—Å–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
        "‚ö°Ô∏è –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç—å. "
        "–ö–∞—Ä—Ç—ã —É–∂–µ –∂–¥—É—Ç –≤–∞—Å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω–∏ –æ—Ç–≤–µ—Ç—è—Ç —Ç–∞–∫, –∫–∞–∫ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π‚Ä¶\n\n"
        "üîÆ –ü—É—Å—Ç—å –í–∞—Å –∂–¥–µ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —ç–º–æ—Ü–∏–π! üòä"
    )

    sent = await _send_daily_media_with_caption(message, None, welcome1)
    if not sent:
        await message.answer(welcome1)
    await message.answer(welcome2)
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


@router.message(Command("menu"))
async def menu_cmd(message: Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


@router.callback_query(F.data == "menu:help")
async def help_screen(cb: CallbackQuery):
    await cb.answer()
    txt = (
        "‚ùì–ü–æ–º–æ—â—å\n\n"
        "‚Ä¢ 1 —Ä–∞—Å–∫–ª–∞–¥ = 1 —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "‚Ä¢ ¬´üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è¬ª ‚Äî —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–≤–∫–ª—é—á–∏—Ç–µ /card_daily_on). \n–í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–∞–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –º–µ–Ω—é.\n\n"
        "‚Ä¢ ¬´üõí –ö—É–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è¬ª (–ø–∞–∫–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞).\n" \
        "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–≤–µ—Ç—ã), –Ω–æ –Ω–µ –±–æ–ª–µ–µ 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –í–∞—Å –¥–≤–æ–∏—Ö, –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ—Ñ–∏–ª—å'.\n\n"
        "‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n"
        "‚Ä¢ –ù–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥/—é—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.\n\n"
    )
    if cb.message.text != txt:
        await _edit_text_or_caption(cb.message, txt, reply_markup=main_menu_inline())
    else:
        await cb.message.edit_reply_markup(reply_markup=main_menu_inline())


@router.callback_query(F.data == "nav:menu")
async def nav_menu(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.answer()
    await _edit_text_or_caption(cb.message, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


# ---------- –°–û–í–ï–¢–´ ----------
@router.callback_query(F.data.in_({"advice:1", "advice:3", "ownq:advice:1", "ownq:advice:3"}))
async def advice_handler(cb: CallbackQuery, state: FSMContext):
    await cb.answer()

    is_one = cb.data.endswith(":1")
    advice_count = 1 if is_one else 3

    # –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É —Å–æ–≤–µ—Ç—É –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    has_pass = await pass_is_active(cb.from_user.id)

    data = await state.get_data()
    base_answer = (_get_message_text(cb.message) or data.get("last_prediction_text") or "").strip()
    if not base_answer:
        await _edit_text_or_caption(
            cb.message,
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ (–∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å).",
            reply_markup=main_menu_inline()
        )
        return

    # --- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç (3) ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ---
    if advice_count == 3:
        if not has_pass:
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ä–∞–∑—É –≤—ã–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç
            await state.update_data(pending_advice_after_payment=3)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî 299‚ÇΩ", callback_data="buy:pass30:29900")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="nav:menu")],
            ])
            await _edit_text_or_caption(
                cb.message,
                "üîí –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç (3 –∫–∞—Ä—Ç—ã) –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                "–û—Ñ–æ—Ä–º–∏—Ç–µ 30-–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–∞—Å–∫–ª–∞–¥—É.",
                reply_markup=kb
            )
            return

        # –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
        try:
            cards = draw_cards(3)
            card_names = [c["name"] for c in cards]
        except Exception:
            card_names = []
        try:
            advice_text = await gpt_make_advice_from_yandex_answer(
                yandex_answer_text=base_answer,
                advice_cards_list=card_names,
                advice_count=3,
            )
        except Exception as e:
            advice_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç: {e}"

        # –í–ê–ñ–ù–û: allow_three=True, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø—Ä–æ–ø–∞–ª–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ
        await _edit_text_or_caption(cb.message, advice_text, reply_markup=_advice_back_kb(allow_three=True))
        return

    # --- –û–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç (1) ---
    # –ø—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å –∏–∑ –ø–∞–∫–µ—Ç–∞; –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç
    pkg_spent = await spend_one_advice(cb.from_user.id)
    if not pkg_spent and not has_pass:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–∞–∫–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ (3) ‚Äî 80‚ÇΩ", callback_data="buy:advicepack3:8000")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="nav:menu")],
        ])
        await _edit_text_or_caption(cb.message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=kb)
        return

    try:
        cards = draw_cards(1)
        card_names = [c["name"] for c in cards]
    except Exception:
        card_names = []

    try:
        advice_text = await gpt_make_advice_from_yandex_answer(
            yandex_answer_text=base_answer,
            advice_cards_list=card_names,
            advice_count=1,
        )
    except Exception as e:
        advice_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç: {e}"

    # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    await _edit_text_or_caption(cb.message, advice_text, reply_markup=_advice_back_kb(allow_three=has_pass))


@router.callback_query(F.data == "advice:back")
async def advice_back_to_prediction(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    prediction = (data.get("last_prediction_text") or "").strip()
    if not prediction:
        await _edit_text_or_caption(cb.message, "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_inline())
        return
    # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –≤ –∏–Ω–ª–∞–π–Ω-–ª–∏–º–∏—Ç–∞—Ö ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    has_pass = await pass_is_active(cb.from_user.id)
    await _edit_text_or_caption(cb.message, prediction, reply_markup=advice_inline_limits(allow_one=True, allow_three=has_pass))


# ---------- —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ----------
@router.callback_query(F.data == "menu:custom")
async def custom_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(CustomFSM.waiting_question)
    hint = (
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
        "‚Ä¢ –ö–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?\n"
        "‚Ä¢ –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏?\n"
    )
    await _edit_text_or_caption(cb.message, hint, reply_markup=back_to_menu_inline())


@router.message(CustomFSM.waiting_question, F.text)
async def custom_receive(message: Message, state: FSMContext):
    question = message.text.strip()

    ok, src = await spend_one_or_pass(message.from_user.id)
    if not ok:
        if src == "pass_rate_limit":
            await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", reply_markup=main_menu_inline())
        elif src == "pass_day_limit":
            await message.answer("üìÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu_inline())
        else:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üõí", reply_markup=main_menu_inline())
        await state.clear()
        return

    # –ö–∞—Ä—Ç—ã (–∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∏–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö ‚Äî –±–µ–∑ —Å–∫–ª–æ–Ω–µ–Ω–∏–π)
    cards = draw_cards(3)
    names = _card_names(cards)
    cards_list = ", ".join(names)

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä
    await message.answer("üîÆ –î–µ–ª–∞—é —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ...")

    # –°—Ä–∞–∑—É ‚Äî –≤–∏–¥–µ–æ –∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç (—á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å)
    await _send_spread_media_with_caption(message, f"üîÆ –í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤!\n\n üÉè –ö–∞—Ä—Ç—ã: {cards_list}")
    # await message.answer(f"üîÆ –í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤! \n\n üÉè –ö–∞—Ä—Ç—ã: {cards_list}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–æ–¥ ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª + —Ç–∞–π–º–∞—É—Ç
    async def _llm():
        return await gpt_make_prediction(
            question=question,
            theme="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
            spread="custom",
            cards_list=cards_list
        )

    with_text = ""
    async with typing_action(message.bot, message.chat.id):
        try:
            prediction = await asyncio.wait_for(_llm(), timeout=40)
        except asyncio.TimeoutError:
            prediction = ""
            bullets = "\n".join([f"–ö–∞—Ä—Ç–∞: {n}\n–°–æ–≤–µ—Ç: –ø—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –∏–Ω—Ç—É–∏—Ü–∏–∏." for n in names])
            with_text = f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n{bullets}"
        except Exception:
            prediction = ""
            with_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    # –†–∞—Å—Å—ã–ª–∞–µ–º –∫–∞—Ä—Ç–æ—á–Ω—ã–µ –±–ª–æ–∫–∏
    if with_text:
        # –§–æ–ª–±—ç–∫: —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –ø–æ—à–ª—ë–º –∫–∞–∫ –µ—Å—Ç—å
        await message.answer(with_text)
        itog_text = _extract_itog(with_text)
    else:
        blocks, itog_text = split_card_blocks_and_itog(prediction)
        if not blocks:
            # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(prediction or "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        else:
            for idx, b in enumerate(blocks):
                # –ñ—ë—Å—Ç–∫–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∫–∞—Ä—Ç –∏–∑ names, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–∫–ª–æ–Ω–µ–Ω–∏–π
                title = names[idx] if idx < len(names) else b["title"]
                text_block = f"–ö–∞—Ä—Ç–∞: {title}\n\n{b['body']}".strip()
                await message.answer(text_block)
                await asyncio.sleep(0.8)

    # –ò—Ç–æ–≥ –æ—Ç–¥–µ–ª—å–Ω–æ
    if itog_text:
        await message.answer(f"‚ú® {itog_text}")

    # –õ–æ–≥
    user = await ensure_user(message.from_user.id, message.from_user.username)
    async with SessionLocal() as s:
        s.add(models.SpreadLog(
            user_id=user.id,
            question=question,
            spread="custom",
            cards={"cards": names},
            cost=1
        ))
        await s.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤
    await state.update_data(
        user_question=question,
        last_question=question,
        last_cards=names,
        last_spread="custom",
        last_theme="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
        last_itog=itog_text or "",
        last_prediction_text=(with_text or prediction or ""),
    )

    # –ö–Ω–æ–ø–∫–∏ —Å–æ–≤–µ—Ç–æ–≤
    has_pass = await pass_is_active(message.from_user.id)
    kb = advice_inline_limits(allow_one=True, allow_three=has_pass)
    await message.answer("üí° –ù—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏? –ü–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç –ø–æ —Ä–∞—Å–∫–ª–∞–¥—É:", reply_markup=kb)




# ---------- –ø—Ä–æ–º–æ–∫–æ–¥ ----------
@router.callback_query(F.data == "menu:promo")
async def promo_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(PromoFSM.waiting_code)
    await _edit_text_or_caption(cb.message, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è", reply_markup=back_to_menu_inline())



@router.message(PromoFSM.waiting_code, F.text)
async def promo_redeem(message: Message, state: FSMContext):
    code = message.text.strip()
    ok, msg = await redeem_promocode(message.from_user.id, code)
    await message.answer(msg, reply_markup=main_menu_inline())
    await state.clear()


# ---------- –ø—Ä–æ—Ñ–∏–ª—å ----------
@router.callback_query(F.data == "menu:profile")
async def show_profile(cb: CallbackQuery):
    await cb.answer()
    user = await ensure_user(cb.from_user.id, cb.from_user.username)

    balance_msgs = await get_user_balance(cb.from_user.id)
    advice_left = await get_advice_balance_by_tg_id(cb.from_user.id)

    is_active = await pass_is_active(cb.from_user.id)
    pass_line = "üé´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    if is_active:
        expires = await _get_pass_expiry_by_tg(cb.from_user.id)
        if expires:
            pass_line = f"üé´ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {_format_date_human(expires)}"

    link = build_invite_link(user.invite_code)

    txt = (
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí¨ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {balance_msgs}\n"
        f"üí° –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤: {advice_left}\n"
        f"{pass_line}\n\n"
        f"üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user.invite_code}\n"
        f"‚ñ∂Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n{link}"
    )

    await _edit_text_or_caption(cb.message, txt, reply_markup=promo_inline())


# ---------- –ø–æ–∫—É–ø–∫–∞ (–∫—Ä–µ–¥–∏—Ç—ã + PASS + —Å–æ–≤–µ—Ç—ã) ----------
PROVIDER_TOKEN = os.getenv("PAYMENTS_PROVIDER_TOKEN")
CURRENCY = os.getenv("CURRENCY", "RUB")
ADVICE_ONE_PRICE_KOPECKS = int(os.getenv("ADVICE_ONE_PRICE_KOPECKS", "8000"))  # 80‚ÇΩ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@router.callback_query(F.data == "menu:buy")
async def buy_menu(cb: CallbackQuery):
    await cb.answer()
    await _edit_text_or_caption(cb.message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=buy_inline())


@router.callback_query(F.data.startswith("buy:"))
async def buy_pick(cb: CallbackQuery, bot: Bot):
    await cb.answer()
    if not PROVIDER_TOKEN:
        await _edit_text_or_caption(cb.message, "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ PAYMENTS_PROVIDER_TOKEN –≤ .env", reply_markup=main_menu_inline())
        return

    parts = cb.data.split(":")
    kind = parts[1]  # "credits" | "pass30" | "advice1" | "advicepack3"

    if kind == "credits":
        credits = int(parts[2])
        amount = int(parts[3])
        title = f"{credits} —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî {amount // 100}‚ÇΩ"
        payload = f"credits_{credits}_{amount}"
        description = f"–ü–∞–∫–µ—Ç –Ω–∞ {credits} —Å–æ–æ–±—â–µ–Ω–∏–π"
    elif kind == "pass30":
        amount = int(parts[2])
        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ (30 –¥–Ω–µ–π) ‚Äî {amount // 100}‚ÇΩ"
        payload = f"pass30_{amount}"
        description = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    elif kind == "advicepack3":
        amount = int(parts[2])
        title = f"–ü–∞–∫–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ (3) ‚Äî {amount // 100}‚ÇΩ"
        payload = f"advicepack3_{amount}"
        description = "–ü–∞–∫–µ—Ç –∏–∑ 3 —Å–æ–≤–µ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–°–æ–≤–µ—Ç¬ª)"
    elif kind == "advice1":
        amount = int(parts[2])
        title = f"–†–∞–∑–æ–≤—ã–π —Å–æ–≤–µ—Ç ‚Äî {amount // 100}‚ÇΩ"
        payload = f"advice1_{amount}"
        description = "–û–ø–ª–∞—Ç–∞ —Ä–∞–∑–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–∞—Å–∫–ª–∞–¥—É"
    else:
        await cb.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏.", reply_markup=main_menu_inline())
        return

    await bot.send_invoice(
        chat_id=cb.message.chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=[LabeledPrice(label=title, amount=amount)],
    )


@router.pre_checkout_query()
async def pre_checkout(pre: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: Message, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:
    ‚Ä¢ advice1 ‚Äî —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º –æ–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç
    ‚Ä¢ advicepack3 ‚Äî —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º –æ–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)
    ‚Ä¢ pass30 ‚Äî –µ—Å–ª–∏ –±—ã–ª —Ñ–ª–∞–≥ pending_advice_after_payment=3 –∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ‚Äî –≤—ã–¥–∞—ë–º –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å–æ–≤–µ—Ç —Å—Ä–∞–∑—É
    """
    sp = message.successful_payment
    payload = sp.invoice_payload or ""
    currency = (sp.currency or CURRENCY).strip()
    total_amount = int(sp.total_amount or 0)

    charge_id = getattr(sp, "provider_payment_charge_id", None) or getattr(sp, "telegram_payment_charge_id", None)

    user = await ensure_user(message.from_user.id, message.from_user.username)

    purchase_id = await create_purchase(
        tg_id=message.from_user.id,
        user_id=user.id,
        credits=0,
        amount=total_amount,
        currency=currency,
        payload=payload,
        provider="yookassa",
        provider_charge_id=charge_id,
        meta={"raw": sp.model_dump()},
    )

    # --- –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–æ–≤—ã–π —Å–æ–≤–µ—Ç ---
    if payload.startswith("advice1_"):
        await mark_purchase_credited(purchase_id)

        data = await state.get_data()
        yandex_answer = (data.get("last_prediction_text") or "").strip()

        if not yandex_answer:
            await message.answer(
                "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ß—Ç–æ–±—ã —è –¥–∞–ª —Å–æ–≤–µ—Ç ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.",
                reply_markup=main_menu_inline()
            )
            return

        try:
            advice_cards = draw_cards(1)
            advice_card_names = [c["name"] for c in advice_cards]
        except Exception:
            advice_card_names = []

        try:
            advice_text = await gpt_make_advice_from_yandex_answer(
                yandex_answer_text=yandex_answer,
                advice_cards_list=advice_card_names,
                advice_count=1,
            )
        except Exception as e:
            advice_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç: {e}"

        note = f"\nID –ø–ª–∞—Ç–µ–∂–∞: {charge_id}" if charge_id else ""
        # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ
        has_pass = await pass_is_active(message.from_user.id)
        await message.answer(advice_text + note, reply_markup=_advice_back_kb(allow_three=has_pass))
        return

    # --- –ø–∞–∫–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ (3) ---
    if payload.startswith("advicepack3_"):
        await mark_purchase_credited(purchase_id)
        try:
            from services.billing import grant_advice_pack
            await grant_advice_pack(user.id, qty=3, reason="advice_pack_3_purchase")
        except Exception:
            pass

        try:
            bal_adv = await get_advice_balance_by_tg_id(message.from_user.id)
            adv_note_bal = f"–î–æ—Å—Ç—É–ø–Ω–æ: {pluralize_advices(bal_adv)}"
        except Exception:
            adv_note_bal = ""

        data = await state.get_data()
        yandex_answer = (data.get("last_prediction_text") or "").strip()

        note = f"\nID –ø–ª–∞—Ç–µ–∂–∞: {charge_id}" if charge_id else ""
        if not yandex_answer:
            await message.answer(
                f"‚úÖ –ü–∞–∫–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ (3) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n{adv_note_bal}{note}\n\n"
                "–°–¥–µ–ª–∞–π—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —Å—Ä–∞–∑—É —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç.",
                reply_markup=main_menu_inline()
            )
            return

        _ = await spend_one_advice(message.from_user.id)

        try:
            cards = draw_cards(1)
            card_names = [c["name"] for c in cards]
        except Exception:
            card_names = []

        try:
            advice_text = await gpt_make_advice_from_yandex_answer(
                yandex_answer_text=yandex_answer,
                advice_cards_list=card_names,
                advice_count=1,
            )
        except Exception as e:
            advice_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç: {e}"

        try:
            bal_adv = await get_advice_balance_by_tg_id(message.from_user.id)
            adv_note_bal = f"–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ: {pluralize_advices(bal_adv)}"
        except Exception:
            pass

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø–∞–∫–µ—Ç—É –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
        has_pass = await pass_is_active(message.from_user.id)
        await message.answer(
            f"‚úÖ –ü–∞–∫–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ (3) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.{note}\n{adv_note_bal}\n\n" + advice_text,
            reply_markup=_advice_back_kb(allow_three=has_pass)
        )
        return

    # --- –ø–æ–¥–ø–∏—Å–∫–∞ PASS (30 –¥–Ω–µ–π) ---
    if payload.startswith("pass30_"):
        expires = await activate_pass_month(user.id, message.from_user.id, plan="pass_unlim")
        await mark_purchase_credited(purchase_id)

        data = await state.get_data()
        pending = data.get("pending_advice_after_payment")
        yandex_answer = (data.get("last_prediction_text") or "").strip()

        note = f"\nID –ø–ª–∞—Ç–µ–∂–∞: {charge_id}" if charge_id else ""

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ ‚Äî —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º 3 –∫–∞—Ä—Ç—ã
        if pending == 3 and yandex_answer:
            try:
                cards = draw_cards(3)
                card_names = [c["name"] for c in cards]
            except Exception:
                card_names = []
            try:
                advice_text = await gpt_make_advice_from_yandex_answer(
                    yandex_answer_text=yandex_answer,
                    advice_cards_list=card_names,
                    advice_count=3,
                )
            except Exception as e:
                advice_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç: {e}"

            # –í–ê–ñ–ù–û: –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ ‚Äî –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Å—Ç–∞—ë—Ç—Å—è (allow_three=True –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ)
            await message.answer(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                f"–î–æ—Å—Ç—É–ø –¥–æ: {_format_date_human(expires)}{note}\n\n"
                + advice_text,
                reply_markup=_advice_back_kb(allow_three=True)
            )
            # –æ—á–∏—Å—Ç–∏–º —Ñ–ª–∞–≥
            await state.update_data(pending_advice_after_payment=None)
            return

        # –û–±—ã—á–Ω–∞—è –≤–µ—Ç–∫–∞ ‚Äî –±–µ–∑ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
        await message.answer(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"–î–æ—Å—Ç—É–ø –¥–æ: {_format_date_human(expires)}\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º."
            f"{note}",
            reply_markup=main_menu_inline()
        )
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—Å—Ç–∏–º —Ñ–ª–∞–≥
        await state.update_data(pending_advice_after_payment=None)
        return

    # --- –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload ---
    note = f"\nID –ø–ª–∞—Ç–µ–∂–∞: {charge_id}" if charge_id else ""
    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.{note}", reply_markup=main_menu_inline())


# ---------- –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ----------
@router.callback_query(F.data == "menu:feedback")
async def feedback_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()

    dl_param = f"fb_{cb.from_user.id}"
    if ADMIN_USERNAME:
        url = f"https://t.me/{ADMIN_USERNAME}?start={dl_param}"
    else:
        from config import ADMIN_IDS
        admin_id = next(iter(ADMIN_IDS), None)
        url = f"tg://user?id={admin_id}" if admin_id else "https://t.me/"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", url=url)],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="nav:menu")],
    ])

    text = (
        "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–æ–π –ª–∏—á–Ω—ã–π —á–∞—Ç. "
        "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await _edit_text_or_caption(cb.message, text, reply_markup=kb)


# ---------- –≥–ª—É—à–∏–ª–∫–∞ ----------
SILENT_LABELS = {
    "üóÇ –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", "üìù –°–≤–æ–π –≤–æ–ø—Ä–æ—Å", "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
    "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "üõí –ö—É–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
    "–õ—é–±–æ–≤—å", "–†–∞–±–æ—Ç–∞", "–°—É–¥—å–±–∞", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
    "–¢—Ä–∏ –∫–∞—Ä—Ç—ã", "–ü–æ–¥–∫–æ–≤–∞", "–ê–ª—Ö–∏–º–∏–∫", "üè† –í –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥"
}
@router.message(F.text.in_(SILENT_LABELS))
async def swallow_reply_keyboard_echo(message: Message):
    return
