# handlers/inline_flow.py
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardRemove, PreCheckoutQuery, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import os
from datetime import datetime, date

from sqlalchemy import select

from keyboards_inline import (
    main_menu_inline, theme_inline, spread_inline, buy_inline, back_to_menu_inline, promo_inline
)
from config import ADMIN_USERNAME
from services.tarot_ai import draw_cards, gpt_make_prediction
from services.billing import (
    ensure_user, get_user_balance, redeem_promocode,
    build_invite_link, grant_credits, activate_pass_month,
    spend_one_or_pass,           # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö/–≤–æ–ø—Ä–æ—Å–∞—Ö
    pass_is_active               # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ PASS –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏–π
)
from services.payments import create_purchase, mark_purchase_credited
from db import SessionLocal, models

router = Router()


# ---------- FSM ----------
class PromoFSM(StatesGroup):
    waiting_code = State()


class CustomFSM(StatesGroup):
    waiting_question = State()


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def _card_names(cards) -> list[str]:
    names = []
    for c in cards:
        if isinstance(c, str):
            names.append(c)
        elif isinstance(c, dict):
            names.append(c.get("name") or c.get("title") or c.get("ru") or c.get("en") or str(c))
        else:
            names.append(str(c))
    return names


def _format_date_human(val) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ DD.MM.YYYY –¥–ª—è datetime/date/ISO-—Å—Ç—Ä–æ–∫–∏."""
    if isinstance(val, (datetime, date)):
        return val.strftime("%d.%m.%Y")
    if isinstance(val, str):
        try:
            return datetime.fromisoformat(val).strftime("%d.%m.%Y")
        except Exception:
            return val
    return str(val)


async def _get_pass_expiry_by_tg(tg_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç expires_at –¥–ª—è PASS –ø–æ tg_id (–∏–ª–∏ None). –ù–∏—á–µ–≥–æ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç."""
    async with SessionLocal() as s:
        q = (
            select(models.SubscriptionPass.expires_at)
            .join(models.User, models.User.id == models.SubscriptionPass.user_id)
            .where(models.User.tg_id == tg_id)
            .order_by(models.SubscriptionPass.expires_at.desc())
        )
        res = await s.execute(q)
        return res.scalar_one_or_none()


# ---------- —Å—Ç–∞—Ä—Ç/–º–µ–Ω—é/—Ö–µ–ª–ø ----------
@router.message(CommandStart())
async def start_inline(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    welcome = (
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞—Ä–æ-–±–æ—Ç!\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n"
        "2) –Ø –≤—ã—Ç—è–Ω—É –∫–∞—Ä—Ç—ã –∏ –¥–∞–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ.\n"
        "3) –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: ¬´üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è¬ª ‚Äî –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
        "–í–∞–∂–Ω–æ: –±–æ—Ç –Ω–µ –¥–∞—ë—Ç –º–µ–¥. –∏ —é—Ä. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n"
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫–∏, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. /help\n"
    )
    await message.answer(welcome, reply_markup=ReplyKeyboardRemove())
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


@router.message(Command("menu"))
async def menu_cmd(message: Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


@router.callback_query(F.data == "menu:help")
async def help_screen(cb: CallbackQuery):
    await cb.answer()
    txt = (
        "‚ùì –ü–æ–º–æ—â—å\n\n"
        "‚Ä¢ 1 —Ä–∞—Å–∫–ª–∞–¥ = 1 —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ ¬´üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è¬ª ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–≤–∫–ª—é—á–∏—Ç–µ /card_daily_on).\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∫–∏: ¬´üõí –ö—É–ø–∏—Ç—å¬ª (–ø–∞–∫–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞).\n"
        "‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
        "‚Ä¢ –ù–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥/—é—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.\n"
    )
    if cb.message.text != txt:
        await cb.message.edit_text(txt, reply_markup=main_menu_inline())
    else:
        await cb.message.edit_reply_markup(reply_markup=main_menu_inline())


@router.callback_query(F.data == "nav:menu")
async def nav_menu(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.answer()
    await cb.message.edit_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


# ---------- —Ç–µ–º—ã/—Ä–∞—Å–∫–ª–∞–¥—ã ----------
@router.callback_query(F.data == "menu:theme")
async def menu_theme(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=theme_inline())


@router.callback_query(F.data.startswith("theme:"))
async def pick_theme(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    theme = cb.data.split(":", 1)[1]
    await state.update_data(theme=theme)
    await cb.message.edit_text(f"–¢–µ–º–∞: {theme}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=spread_inline())


@router.callback_query(F.data == "nav:theme")
async def back_to_theme(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=theme_inline())


@router.callback_query(F.data.startswith("spread:"))
async def pick_spread(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    spread = cb.data.split(":", 1)[1]
    data = await state.get_data()
    theme = data.get("theme", "–û–±—â–∞—è")

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø (PASS/–∫—Ä–µ–¥–∏—Ç) ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–∫–ª–∞–¥–∞
    ok, src = await spend_one_or_pass(cb.from_user.id)
    if not ok:
        if src == "pass_rate_limit":
            await cb.message.edit_text("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", reply_markup=main_menu_inline())
        elif src == "pass_day_limit":
            await cb.message.edit_text("üìÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu_inline())
        else:
            await cb.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üõí", reply_markup=main_menu_inline())
        await state.clear()
        return

    if spread == "–¢—Ä–∏ –∫–∞—Ä—Ç—ã":
        cards = draw_cards(3)
    elif spread == "–ü–æ–¥–∫–æ–≤–∞":
        cards = draw_cards(7)
    elif spread == "–ê–ª—Ö–∏–º–∏–∫":
        cards = draw_cards(4)
    else:
        cards = draw_cards(3)

    names = _card_names(cards)
    cards_list = ", ".join(names)
    await cb.message.edit_text(f"üé¥ –†–∞—Å–∫–ª–∞–¥: {spread}\nüÉè –ö–∞—Ä—Ç—ã: {cards_list}\n\nüîÆ –î–µ–ª–∞—é —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ...")

    try:
        prediction = await gpt_make_prediction(
            question=f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É '{theme}'",
            theme=theme,
            spread=spread,
            cards_list=cards_list
        )
    except Exception:
        prediction = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    user = await ensure_user(cb.from_user.id, cb.from_user.username)
    async with SessionLocal() as s:
        s.add(models.SpreadLog(user_id=user.id, theme=theme, spread=spread, cards={"cards": names}, cost=1))
        await s.commit()

    await cb.message.edit_text(prediction, reply_markup=main_menu_inline())
    await state.clear()


# ---------- —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ----------
@router.callback_query(F.data == "menu:custom")
async def custom_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(CustomFSM.waiting_question)
    hint = (
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
        "‚Ä¢ –ö–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?\n"
        "‚Ä¢ –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –≤ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏?\n"
    )
    await cb.message.edit_text(hint, reply_markup=back_to_menu_inline())


@router.message(CustomFSM.waiting_question, F.text)
async def custom_receive(message: Message, state: FSMContext):
    question = message.text.strip()

    ok, src = await spend_one_or_pass(message.from_user.id)
    if not ok:
        if src == "pass_rate_limit":
            await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", reply_markup=main_menu_inline())
        elif src == "pass_day_limit":
            await message.answer("üìÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu_inline())
        else:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üõí", reply_markup=main_menu_inline())
        await state.clear()
        return

    cards = draw_cards(3)
    names = _card_names(cards)
    cards_list = ", ".join(names)
    await message.answer(f"üÉè –ö–∞—Ä—Ç—ã: {cards_list}\n\nüîÆ –î–µ–ª–∞—é —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ...")

    try:
        prediction = await gpt_make_prediction(
            question=question,
            theme="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
            spread="custom",
            cards_list=cards_list
        )
    except Exception:
        prediction = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    user = await ensure_user(message.from_user.id, message.from_user.username)
    async with SessionLocal() as s:
        s.add(models.SpreadLog(user_id=user.id, question=question, spread="custom", cards={"cards": names}, cost=1))
        await s.commit()

    await message.answer(prediction, reply_markup=main_menu_inline())
    await state.clear()


# ---------- –ø—Ä–æ–º–æ–∫–æ–¥ ----------
@router.callback_query(F.data == "menu:promo")
async def promo_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(PromoFSM.waiting_code)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è", reply_markup=back_to_menu_inline())


@router.message(PromoFSM.waiting_code, F.text)
async def promo_redeem(message: Message, state: FSMContext):
    code = message.text.strip()
    ok, msg = await redeem_promocode(message.from_user.id, code)
    await message.answer(msg, reply_markup=main_menu_inline())
    await state.clear()


# ---------- –ø—Ä–æ—Ñ–∏–ª—å ----------
@router.callback_query(F.data == "menu:profile")
async def show_profile(cb: CallbackQuery):
    await cb.answer()
    user = await ensure_user(cb.from_user.id, cb.from_user.username)
    balance = await get_user_balance(cb.from_user.id)

    # –ù–ò–ß–ï–ì–û –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å.
    is_active = await pass_is_active(cb.from_user.id)
    pass_line = "üé´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    if is_active:
        expires = await _get_pass_expiry_by_tg(cb.from_user.id)
        if expires:
            pass_line = f"üé´ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {_format_date_human(expires)}"

    link = build_invite_link(user.invite_code)
    txt = (f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
           f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
           f"{pass_line}\n\n"
           f"üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user.invite_code}\n"
           f"‚ñ∂Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n{link}")
    await cb.message.edit_text(txt, reply_markup=promo_inline())


# ---------- –ø–æ–∫—É–ø–∫–∞ (–∫—Ä–µ–¥–∏—Ç—ã + PASS) ----------
PROVIDER_TOKEN = os.getenv("PAYMENTS_PROVIDER_TOKEN")
CURRENCY = os.getenv("CURRENCY", "RUB")


@router.callback_query(F.data == "menu:buy")
async def buy_menu(cb: CallbackQuery):
    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=buy_inline())


@router.callback_query(F.data.startswith("buy:"))
async def buy_pick(cb: CallbackQuery, bot: Bot):
    await cb.answer()
    if not PROVIDER_TOKEN:
        await cb.message.edit_text("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ PAYMENTS_PROVIDER_TOKEN –≤ .env", reply_markup=main_menu_inline())
        return

    parts = cb.data.split(":")
    kind = parts[1]  # "credits" | "pass30"
    print(parts)

    if kind == "credits":
        credits = int(parts[2])
        amount = int(parts[3])
        title = f"{credits} —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî {amount // 100}‚ÇΩ"
        payload = f"credits_{credits}_{amount}"
        description = f"–ü–∞–∫–µ—Ç –Ω–∞ {credits} —Å–æ–æ–±—â–µ–Ω–∏–π"
    elif kind == "pass30":
        amount = int(parts[2])
        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ (30 –¥–Ω–µ–π) ‚Äî {amount // 100}‚ÇΩ"
        payload = f"pass30_{amount}"
        description = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    else:
        await cb.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏.", reply_markup=main_menu_inline())
        return

    await bot.send_invoice(
        chat_id=cb.message.chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=[LabeledPrice(label=title, amount=amount)],
    )


@router.pre_checkout_query()
async def pre_checkout(pre: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: Message):
    sp = message.successful_payment
    payload = sp.invoice_payload
    currency = sp.currency or CURRENCY
    total_amount = sp.total_amount
    charge_id = getattr(sp, "provider_payment_charge_id", None)

    user = await ensure_user(message.from_user.id, message.from_user.username)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ –æ–¥–∏–Ω —Ä–∞–∑ (–∏ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤, –∏ –¥–ª—è PASS)
    purchase_id = await create_purchase(
        tg_id=message.from_user.id,
        user_id=user.id,
        credits=0,  # —É—Ç–æ—á–Ω–∏–º –¥–ª—è credits –Ω–∏–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        amount=total_amount,
        currency=currency,
        payload=payload,
        provider="yookassa",
        provider_charge_id=charge_id,
        meta={"raw": sp.model_dump()},
    )

    if payload.startswith("credits_"):
        try:
            _, credits_str, _ = payload.split("_")
            credits = int(credits_str)
        except Exception:
            credits = 0

        if credits > 0:
            await grant_credits(
                user.id, credits, reason="telegram_invoice",
                meta={"purchase_id": purchase_id, "charge_id": charge_id}
            )
            await mark_purchase_credited(purchase_id)
            bal = await get_user_balance(message.from_user.id)
            note = f"\nID –ø–ª–∞—Ç–µ–∂–∞: {charge_id}" if charge_id else ""
            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!\n–ù–∞—á–∏—Å–ª–µ–Ω–æ {credits}. –ë–∞–ª–∞–Ω—Å: {bal}{note}",
                reply_markup=main_menu_inline()
            )
            return

        await message.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–∞–∫–µ—Ç.", reply_markup=main_menu_inline())
        return

    if payload.startswith("pass30_"):
        expires = await activate_pass_month(user.id, message.from_user.id, plan="pass_unlim")
        await mark_purchase_credited(purchase_id)
        bal = await get_user_balance(message.from_user.id)
        note = f"\nID –ø–ª–∞—Ç–µ–∂–∞: {charge_id}" if charge_id else ""
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π (–±–µ–∑–ª–∏–º–∏—Ç) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n–î–æ—Å—Ç—É–ø –¥–æ: {_format_date_human(expires)}\n"
            f"–¢–µ–ø–µ—Ä—å —Ä–∞—Å–∫–ª–∞–¥—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. "
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤: {bal}{note}",
            reply_markup=main_menu_inline()
        )
        return

    # fallback
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu_inline())




#–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

@router.callback_query(F.data == "menu:feedback")
async def feedback_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()

    # deep-link, —á—Ç–æ–±—ã —É —Ç–µ–±—è –≤ –õ–° –±—ã–ª —Å—Ç–∞—Ä—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # —Ç—ã —É–≤–∏–¥–∏—à—å –µ–≥–æ –∫–∞–∫ /start fb_<tg_id>
    dl_param = f"fb_{cb.from_user.id}"
    if ADMIN_USERNAME:
        url = f"https://t.me/{ADMIN_USERNAME}?start={dl_param}"
    else:
        # fallback: –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –≤–æ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö, –Ω–æ —á–∞—Å—Ç–æ –æ–∫)
        # –õ—É—á—à–µ –≤—Å—ë –∂–µ –∑–∞–≤–µ—Å—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã–π username.
        from config import ADMIN_IDS
        admin_id = next(iter(ADMIN_IDS), None)
        url = f"tg://user?id={admin_id}" if admin_id else "https://t.me/"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", url=url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")],
    ])

    text = (
        "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–æ–π –ª–∏—á–Ω—ã–π —á–∞—Ç. "
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏ –Ω–∞–∂–º–∏—Ç–µ Start, –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ)."
    )
    await cb.message.edit_text(text, reply_markup=kb)



# ---------- –≥–ª—É—à–∏–ª–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π ¬´—ç—Ö–æ¬ª —Å—Ç–∞—Ä—ã—Ö Reply-–∫–Ω–æ–ø–æ–∫ ----------
SILENT_LABELS = {
    "üóÇ –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É","üìù –°–≤–æ–π –≤–æ–ø—Ä–æ—Å","üéÅ –ü—Ä–æ–º–æ–∫–æ–¥","üë§ –ü—Ä–æ—Ñ–∏–ª—å",
    "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞","üõí –ö—É–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
    "–õ—é–±–æ–≤—å","–†–∞–±–æ—Ç–∞","–°—É–¥—å–±–∞","–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
    "–¢—Ä–∏ –∫–∞—Ä—Ç—ã","–ü–æ–¥–∫–æ–≤–∞","–ê–ª—Ö–∏–º–∏–∫","‚¨ÖÔ∏è –í –º–µ–Ω—é","üîô –ù–∞–∑–∞–¥"
}
@router.message(F.text.in_(SILENT_LABELS))
async def swallow_reply_keyboard_echo(message: Message):
    return
