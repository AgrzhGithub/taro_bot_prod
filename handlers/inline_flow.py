# handlers/inline_flow.py
from services import tarot_ai
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardRemove, PreCheckoutQuery, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup,
    FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import os
from datetime import datetime, date

from sqlalchemy import select

from keyboards_inline import (
    main_menu_inline, theme_inline, spread_inline, buy_inline, back_to_menu_inline, promo_inline, advice_inline_limits,
    advice_buy_inline
)
from config import ADMIN_USERNAME
from services.tarot_ai import draw_cards, gpt_make_prediction, merge_with_scenario, gpt_make_advice_from_yandex_answer
from services.billing import (
    ensure_user, get_user_balance, redeem_promocode,
    build_invite_link, grant_credits, activate_pass_month,
    spend_one_or_pass,           # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö/–≤–æ–ø—Ä–æ—Å–∞—Ö
    pass_is_active               # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ PASS –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏–π
)
from handlers.daily_card import _send_daily_media_with_caption
from services.payments import create_purchase, mark_purchase_credited
from db import SessionLocal, models

router = Router()


# ---------- FSM ----------
class PromoFSM(StatesGroup):
    waiting_code = State()


class CustomFSM(StatesGroup):
    waiting_question = State()


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def _card_names(cards) -> list[str]:
    names = []
    for c in cards:
        if isinstance(c, str):
            names.append(c)
        elif isinstance(c, dict):
            names.append(c.get("name") or c.get("title") or c.get("ru") or c.get("en") or str(c))
        else:
            names.append(str(c))
    return names


def _format_date_human(val) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ DD.MM.YYYY –¥–ª—è datetime/date/ISO-—Å—Ç—Ä–æ–∫–∏."""
    if isinstance(val, (datetime, date)):
        return val.strftime("%d.%m.%Y")
    if isinstance(val, str):
        try:
            return datetime.fromisoformat(val).strftime("%d.%m.%Y")
        except Exception:
            return val
    return str(val)


async def _get_pass_expiry_by_tg(tg_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç expires_at –¥–ª—è PASS –ø–æ tg_id (–∏–ª–∏ None). –ù–∏—á–µ–≥–æ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç."""
    async with SessionLocal() as s:
        q = (
            select(models.SubscriptionPass.expires_at)
            .join(models.User, models.User.id == models.SubscriptionPass.user_id)
            .where(models.User.tg_id == tg_id)
            .order_by(models.SubscriptionPass.expires_at.desc())
        )
        res = await s.execute(q)
        return res.scalar_one_or_none()


# ---------- —Å—Ç–∞—Ä—Ç/–º–µ–Ω—é/—Ö–µ–ª–ø ----------
@router.message(CommandStart())
async def start_inline(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    welcome = (
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä –¢–∞—Ä–æ!\n\n"
        "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∞ –í–∞—à –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –¢–∞—Ä–æ. "
        "–ë–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ –ª—É—á—à–∏—Ö –∫–Ω–∏–≥–∞—Ö –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö –ø–æ –∫–∞—Ä—Ç–∞–º –¢–∞—Ä–æ.\n\n"

        "‚ú® –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–≥–∏—è:\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π –ø–æ–∫–æ—è. –°–¥–µ–ª–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö, "
        "–æ—Ç–ø—É—Å—Ç–∏—Ç–µ —Ç—Ä–µ–≤–æ–≥–∏ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏. –ß–µ–º —Å–ø–æ–∫–æ–π–Ω–µ–µ –±—É–¥–µ—Ç –≤–∞—à —Ä–∞–∑—É–º, —Ç–µ–º —è—Å–Ω–µ–µ –∑–∞–≥–æ–≤–æ—Ä—è—Ç –∫–∞—Ä—Ç—ã"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É: –ª—é–±–æ–≤—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –±—É–¥—É—â–µ–µ, —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –∏–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.\n"
        "2) –Ø —Ä–∞—Å–∫—Ä–æ—é –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –∫–∞—Ä—Ç—ã ‚Äî –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ç—Ä—ë—Ö–∫–∞—Ä—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–æ –¥—Ä–µ–≤–Ω–∏—Ö —Å—Ö–µ–º –≤—Ä–æ–¥–µ ¬´–ü–æ–¥–∫–æ–≤—ã¬ª –∏–ª–∏ ¬´–ê–ª—Ö–∏–º–∏–∫–∞¬ª.\n"
        "3) –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ¬´–ò—Ç–æ–≥¬ª ‚Äî —Å—É—Ç—å –ø–æ—Å–ª–∞–Ω–∏—è –∫–∞—Ä—Ç. "
        "–ê –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ–≥–æ, –µ—Å—Ç—å ‚ú®–°–æ–≤–µ—Ç—ã: –æ–¥–Ω–∞ –∏–ª–∏ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∂—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π.\n\n"

        "üåô –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Äî ¬´üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è¬ª ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Å–æ–±—É—é –∫–∞—Ä—Ç—É, "
        "–∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞—ë—Ç —Ç–æ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞—à–µ–º—É –ø—É—Ç–∏. "
        "–° –Ω–µ–π –º–æ–∂–Ω–æ –ø—Ä–æ–∂–∏—Ç—å –¥–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ —É–≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å—É–¥—å–±—ã.\n\n"

        "üíé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n"
        "‚Äî –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥.\n"
        "‚Äî –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–≤–µ—Ç–∞–º –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é "
        "–≤—Å–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n\n"

        "‚ö°Ô∏è –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç—å. "
        "–ö–∞—Ä—Ç—ã —É–∂–µ –∂–¥—É—Ç –≤–∞—Å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω–∏ –æ—Ç–≤–µ—Ç—è—Ç —Ç–∞–∫, –∫–∞–∫ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π‚Ä¶\n\n"

        "üîÆ –ü—É—Å—Ç—å –í–∞—Å –∂–¥–µ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —ç–º–æ—Ü–∏–π! üòä"
        
    )


    sent = await _send_daily_media_with_caption(message, None, welcome)
    if not sent:
        await message.answer(welcome)

    #await message.answer(welcome, reply_markup=ReplyKeyboardRemove())
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


@router.message(Command("menu"))
async def menu_cmd(message: Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


@router.callback_query(F.data == "menu:help")
async def help_screen(cb: CallbackQuery):
    await cb.answer()
    txt = (
        "‚ùì –ü–æ–º–æ—â—å\n\n"
        "‚Ä¢ 1 —Ä–∞—Å–∫–ª–∞–¥ = 1 —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ ¬´üóì –ö–∞—Ä—Ç–∞ –¥–Ω—è¬ª ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–≤–∫–ª—é—á–∏—Ç–µ /card_daily_on).\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∫–∏: ¬´üõí –ö—É–ø–∏—Ç—å¬ª (–ø–∞–∫–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞).\n"
        "‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
        "‚Ä¢ –ù–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥/—é—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.\n"
    )
    if cb.message.text != txt:
        await cb.message.edit_text(txt, reply_markup=main_menu_inline())
    else:
        await cb.message.edit_reply_markup(reply_markup=main_menu_inline())


@router.callback_query(F.data == "nav:menu")
async def nav_menu(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.answer()
    await cb.message.edit_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_inline())


# ---------- —Ç–µ–º—ã/—Ä–∞—Å–∫–ª–∞–¥—ã ----------
@router.callback_query(F.data == "menu:theme")
async def menu_theme(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=theme_inline())


@router.callback_query(F.data.startswith("theme:"))
async def pick_theme(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    theme = cb.data.split(":", 1)[1]
    await state.update_data(theme=theme)
    await cb.message.edit_text(f"–¢–µ–º–∞: {theme}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=spread_inline())


@router.callback_query(F.data == "nav:theme")
async def back_to_theme(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=theme_inline())


@router.callback_query(F.data.startswith("spread:"))
async def pick_spread(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    spread = cb.data.split(":", 1)[1]
    data = await state.get_data()

    theme = data.get("theme", "–û–±—â–∞—è")
    scenario_ctx = data.get("scenario_ctx")  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç–µ–º—ã, –µ—Å–ª–∏ –±—ã–ª–æ
    # –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –±–µ—Ä—ë–º –∏–∑ FSM (–∫–∞–∫ —Ç—ã –µ–≥–æ —Ç—É–¥–∞ –∫–ª–∞–ª –ø—Ä–∏ –≤–≤–æ–¥–µ)
    user_question = (
        data.get("user_question")
        or data.get("question")
        or data.get("last_question")
        or ""
    )

    # —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    ok, src = await spend_one_or_pass(cb.from_user.id)
    if not ok:
        if src == "pass_rate_limit":
            await cb.message.edit_text("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", reply_markup=main_menu_inline())
        elif src == "pass_day_limit":
            await cb.message.edit_text("üìÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu_inline())
        else:
            await cb.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üõí", reply_markup=main_menu_inline())
        await state.clear()
        return

    # —Ç—è–≥–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –∫–∞–∫ —É —Ç–µ–±—è
    if spread == "–¢—Ä–∏ –∫–∞—Ä—Ç—ã":
        cards = draw_cards(3)
    elif spread == "–ü–æ–¥–∫–æ–≤–∞":
        cards = draw_cards(7)
    elif spread == "–ê–ª—Ö–∏–º–∏–∫":
        cards = draw_cards(4)
    else:
        cards = draw_cards(3)

    names = _card_names(cards)                 # —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç–∞
    cards_list = ", ".join(names)              # —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–¥–∞—ë—à—å –≤ gpt
    await cb.message.edit_text(f"üé¥ –†–∞—Å–∫–ª–∞–¥: {spread}\nüÉè –ö–∞—Ä—Ç—ã: {cards_list}\n\nüîÆ –î–µ–ª–∞—é —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ...")

    try:
        # –í–ê–ñ–ù–û: –≤ question –ø–µ—Ä–µ–¥–∞—ë–º –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø, –∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ prompt –≤–Ω—É—Ç—Ä–∏ gpt-—Ñ—É–Ω–∫—Ü–∏–∏
        prediction = await gpt_make_prediction(
            question=user_question,
            theme=theme,
            spread=spread,
            cards_list=cards_list,     # –µ—Å–ª–∏ —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            scenario_ctx=scenario_ctx,
        )
    except Exception as e:
        prediction = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ: {e}"

    # –ª–æ–≥ –≤ –ë–î ‚Äî –∫–∞–∫ –±—ã–ª–æ
    user = await ensure_user(cb.from_user.id, cb.from_user.username)
    async with SessionLocal() as s:
        s.add(models.SpreadLog(user_id=user.id, theme=theme, spread=spread, cards={"cards": names}, cost=1))
        await s.commit()

    # –∏–∑–≤–ª–µ–∫–∞–µ–º –ò—Ç–æ–≥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ ¬´–°–æ–≤–µ—Ç¬ª
    itog = _extract_itog(prediction)
    await state.update_data(
        last_theme=theme,
        last_spread=spread,
        last_question=user_question,   # <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        last_cards=names,              # —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω –∫–∞—Ä—Ç (–Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–≤–µ—Ç–∞)
        last_itog=itog,
        last_scenario=scenario_ctx,
        last_prediction_text=prediction,  # <-- –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    )

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ "–û–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç (1)" –∏ "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç (3)"
    await cb.message.edit_text(prediction, reply_markup=advice_inline_limits(True, True))

    # –í–ê–ñ–ù–û: –ù–ï –û–ß–ò–©–ê–ï–ú state –∑–¥–µ—Å—å, –∏–Ω–∞—á–µ —Å–æ–≤–µ—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—é—Ç
    # await state.clear()  # <-- –Ω–µ –æ—á–∏—â–∞–µ–º


@router.callback_query(F.data.in_({
    "advice:1", "advice:3",          # –∏–∑ –≤–µ—Ç–∫–∏ ¬´—Ç–µ–º¬ª
    "ownq:advice:1", "ownq:advice:3" # –∏–∑ –≤–µ—Ç–∫–∏ ¬´–°–≤–æ–π –≤–æ–ø—Ä–æ—Å¬ª
}))
async def advice_handler(cb: CallbackQuery, state: FSMContext):
    await cb.answer()

    # –µ–¥–∏–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    data_str = cb.data
    # –¥–æ–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: "advice:1" –∏ "ownq:advice:1"
    is_one = data_str.endswith(":1")
    advice_count = 1 if is_one else 3

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    has_pass = await pass_is_active(cb.from_user.id)

    # 3 –∫–∞—Ä—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
    if advice_count == 3 and not has_pass:
        await cb.message.edit_text(
            "üîí –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç (3 –∫–∞—Ä—Ç—ã) –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ 30-–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–º, —Ç–∞–∫ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî 599‚ÇΩ", callback_data="buy:pass30:59900")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")],
            ])
        )
        return

    # 1 –∫–∞—Ä—Ç–∞ ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
    if advice_count == 1 and not has_pass:
        await cb.message.edit_text(
            "üß≠ –û–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç ‚Äî —Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç.",
            reply_markup=advice_buy_inline(ADVICE_ONE_PRICE_KOPECKS)
        )
        return

    # –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏–º —Å–æ–≤–µ—Ç —Å—Ä–∞–∑—É (1 –∏–ª–∏ 3 –∫–∞—Ä—Ç—ã)
    data = await state.get_data()
    yandex_answer = (cb.message.text or data.get("last_prediction_text") or "").strip()

    try:
        advice_cards = draw_cards(advice_count)
        advice_card_names = [c["name"] for c in advice_cards]
    except Exception:
        advice_card_names = []

    try:
        advice_text = await gpt_make_advice_from_yandex_answer(
            yandex_answer_text=yandex_answer,
            advice_cards_list=advice_card_names,
            advice_count=advice_count,
        )
    except Exception as e:
        advice_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç: {e}"

    # –ø–æ—Å–ª–µ 1 –∫–∞—Ä—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º 3; –ø–æ—Å–ª–µ 3 ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –æ–±–µ
    if is_one:
        new_kb = advice_inline_limits(allow_one=False, allow_three=True)
    else:
        new_kb = advice_inline_limits(allow_one=False, allow_three=False)

    await cb.message.edit_text(advice_text, reply_markup=new_kb)


# ---------- —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ----------
@router.callback_query(F.data == "menu:custom")
async def custom_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(CustomFSM.waiting_question)
    hint = (
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
        "‚Ä¢ –ö–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?\n"
        "‚Ä¢ –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –≤ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏?\n"
    )
    await cb.message.edit_text(hint, reply_markup=back_to_menu_inline())


@router.message(CustomFSM.waiting_question, F.text)
async def custom_receive(message: Message, state: FSMContext):
    question = message.text.strip()

    ok, src = await spend_one_or_pass(message.from_user.id)
    if not ok:
        if src == "pass_rate_limit":
            await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", reply_markup=main_menu_inline())
        elif src == "pass_day_limit":
            await message.answer("üìÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu_inline())
        else:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üõí", reply_markup=main_menu_inline())
        await state.clear()
        return

    cards = draw_cards(3)
    names = _card_names(cards)
    cards_list = ", ".join(names)
    await message.answer(f"üÉè –ö–∞—Ä—Ç—ã: {cards_list}\n\nüîÆ –î–µ–ª–∞—é —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ...")

    try:
        prediction = await gpt_make_prediction(
            question=question,
            theme="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
            spread="custom",
            cards_list=cards_list
        )
    except Exception:
        prediction = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    user = await ensure_user(message.from_user.id, message.from_user.username)
    async with SessionLocal() as s:
        s.add(models.SpreadLog(user_id=user.id, question=question, spread="custom", cards={"cards": names}, cost=1))
        await s.commit()

    # ‚¨áÔ∏è –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –æ–ø–ª–∞—Ç
    await state.update_data(
        user_question=question,
        last_question=question,
        last_cards=names,
        last_spread="custom",
        last_theme="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
        last_itog=_extract_itog(prediction),
        last_prediction_text=prediction,  # <-- –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–≤–µ—Ç–æ–≤, —á—Ç–æ –∏ –≤ –≤–µ—Ç–∫–µ ¬´—Ç–µ–º¬ª
    await message.answer(prediction, reply_markup=advice_inline_limits(allow_one=True, allow_three=True))
    # state –ù–ï –æ—á–∏—â–∞–µ–º, —Å–æ–≤–µ—Ç—ã/–æ–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # await state.clear()


# ---------- –ø—Ä–æ–º–æ–∫–æ–¥ ----------
@router.callback_query(F.data == "menu:promo")
async def promo_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(PromoFSM.waiting_code)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è", reply_markup=back_to_menu_inline())


@router.message(PromoFSM.waiting_code, F.text)
async def promo_redeem(message: Message, state: FSMContext):
    code = message.text.strip()
    ok, msg = await redeem_promocode(message.from_user.id, code)
    await message.answer(msg, reply_markup=main_menu_inline())
    await state.clear()


# ---------- –ø—Ä–æ—Ñ–∏–ª—å ----------
@router.callback_query(F.data == "menu:profile")
async def show_profile(cb: CallbackQuery):
    await cb.answer()
    user = await ensure_user(cb.from_user.id, cb.from_user.username)
    balance = await get_user_balance(cb.from_user.id)

    # –ù–ò–ß–ï–ì–û –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å.
    is_active = await pass_is_active(cb.from_user.id)
    pass_line = "üé´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    if is_active:
        expires = await _get_pass_expiry_by_tg(cb.from_user.id)
        if expires:
            pass_line = f"üé´ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {_format_date_human(expires)}"

    link = build_invite_link(user.invite_code)
    txt = (f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
           f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
           f"{pass_line}\n\n"
           f"üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user.invite_code}\n"
           f"‚ñ∂Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n{link}")
    await cb.message.edit_text(txt, reply_markup=promo_inline())


# ---------- –ø–æ–∫—É–ø–∫–∞ (–∫—Ä–µ–¥–∏—Ç—ã + PASS + —Ä–∞–∑–æ–≤—ã–π —Å–æ–≤–µ—Ç) ----------
PROVIDER_TOKEN = os.getenv("PAYMENTS_PROVIDER_TOKEN")
CURRENCY = os.getenv("CURRENCY", "RUB")
ADVICE_ONE_PRICE_KOPECKS = int(os.getenv("ADVICE_ONE_PRICE_KOPECKS", "9900"))  # 99‚ÇΩ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@router.callback_query(F.data == "menu:buy")
async def buy_menu(cb: CallbackQuery):
    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=buy_inline())


@router.callback_query(F.data.startswith("buy:"))
async def buy_pick(cb: CallbackQuery, bot: Bot):
    await cb.answer()
    if not PROVIDER_TOKEN:
        await cb.message.edit_text("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ PAYMENTS_PROVIDER_TOKEN –≤ .env", reply_markup=main_menu_inline())
        return

    parts = cb.data.split(":")
    kind = parts[1]  # "credits" | "pass30" | "advice1"
    print(parts)

    if kind == "credits":
        credits = int(parts[2])
        amount = int(parts[3])
        title = f"{credits} —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî {amount // 100}‚ÇΩ"
        payload = f"credits_{credits}_{amount}"
        description = f"–ü–∞–∫–µ—Ç –Ω–∞ {credits} —Å–æ–æ–±—â–µ–Ω–∏–π"
    elif kind == "pass30":
        amount = int(parts[2])
        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ (30 –¥–Ω–µ–π) ‚Äî {amount // 100}‚ÇΩ"
        payload = f"pass30_{amount}"
        description = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    elif kind == "advice1":  # <<< —Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –∑–∞ –æ–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç
        amount = int(parts[2])
        title = f"–û–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç (1 –∫–∞—Ä—Ç–∞) ‚Äî {amount // 100}‚ÇΩ"
        payload = f"advice1_{amount}"
        description = "–†–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –∑–∞ –æ–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç (1 –∫–∞—Ä—Ç–∞)"
    else:
        await cb.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏.", reply_markup=main_menu_inline())
        return

    await bot.send_invoice(
        chat_id=cb.message.chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=[LabeledPrice(label=title, amount=amount)],
    )


@router.pre_checkout_query()
async def pre_checkout(pre: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: Message, state: FSMContext):
    sp = message.successful_payment
    payload = sp.invoice_payload
    currency = sp.currency or CURRENCY
    total_amount = sp.total_amount
    charge_id = getattr(sp, "provider_payment_charge_id", None)

    user = await ensure_user(message.from_user.id, message.from_user.username)

    purchase_id = await create_purchase(
        tg_id=message.from_user.id,
        user_id=user.id,
        credits=0,
        amount=total_amount,
        currency=currency,
        payload=payload,
        provider="yookassa",
        provider_charge_id=charge_id,
        meta={"raw": sp.model_dump()},
    )

    # --- —Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –∑–∞ –æ–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç ---
    if payload.startswith("advice1_"):
        await mark_purchase_credited(purchase_id)

        data = await state.get_data()
        yandex_answer = (data.get("last_prediction_text") or "").strip()

        try:
            advice_cards = draw_cards(1)
            advice_card_names = [c["name"] for c in advice_cards]
        except Exception:
            advice_card_names = []

        try:
            advice_text = await gpt_make_advice_from_yandex_answer(
                yandex_answer_text=yandex_answer,
                advice_cards_list=advice_card_names,
                advice_count=1,
            )
        except Exception as e:
            advice_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç: {e}"

        # –ø–æ—Å–ª–µ —Ä–∞–∑–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
        await message.answer(
            advice_text,
            reply_markup=advice_inline_limits(allow_one=False, allow_three=True)
        )
        return
    # --- /—Ä–∞–∑–æ–≤—ã–π —Å–æ–≤–µ—Ç ---

    # –ø–∞–∫–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    if payload.startswith("credits_"):
        parts = payload.split("_")
        credits = int(parts[1])
        await grant_credits(user.id, credits, reason=f"payment_{total_amount}")
        await mark_purchase_credited(purchase_id)
        bal = await get_user_balance(message.from_user.id)
        note = f"\nID –ø–ª–∞—Ç–µ–∂–∞: {charge_id}" if charge_id else ""
        await message.answer(
            f"‚úÖ –ü–∞–∫–µ—Ç –Ω–∞ {credits} —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            f"–ë–∞–ª–∞–Ω—Å: {bal}.{note}",
            reply_markup=main_menu_inline()
        )
        return

    # –ø–æ–¥–ø–∏—Å–∫–∞ PASS
    if payload.startswith("pass30_"):
        expires = await activate_pass_month(user.id, message.from_user.id, plan="pass_unlim")
        await mark_purchase_credited(purchase_id)
        bal = await get_user_balance(message.from_user.id)
        note = f"\nID –ø–ª–∞—Ç–µ–∂–∞: {charge_id}" if charge_id else ""
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n–î–æ—Å—Ç—É–ø –¥–æ: {_format_date_human(expires)}\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ–±—ã—á–Ω—ã–π –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç.",
            reply_markup=main_menu_inline()
        )
        return

    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu_inline())


# ---------- –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ----------
@router.callback_query(F.data == "menu:feedback")
async def feedback_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()

    # deep-link, —á—Ç–æ–±—ã —É —Ç–µ–±—è –≤ –õ–° –±—ã–ª —Å—Ç–∞—Ä—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # —Ç—ã —É–≤–∏–¥–∏—à—å –µ–≥–æ –∫–∞–∫ /start fb_<tg_id>
    dl_param = f"fb_{cb.from_user.id}"
    if ADMIN_USERNAME:
        url = f"https://t.me/{ADMIN_USERNAME}?start={dl_param}"
    else:
        # fallback: –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –≤–æ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö, –Ω–æ —á–∞—Å—Ç–æ –æ–∫)
        # –õ—É—á—à–µ –≤—Å—ë –∂–µ –∑–∞–≤–µ—Å—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã–π username.
        from config import ADMIN_IDS
        admin_id = next(iter(ADMIN_IDS), None)
        url = f"tg://user?id={admin_id}" if admin_id else "https://t.me/"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", url=url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="nav:menu")],
    ])

    text = (
        "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–æ–π –ª–∏—á–Ω—ã–π —á–∞—Ç. "
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏ –Ω–∞–∂–º–∏—Ç–µ Start, –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ)."
    )
    await cb.message.edit_text(text, reply_markup=kb)


def _extract_itog(text: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ '–ò—Ç–æ–≥' –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    –ï—Å–ª–∏ '–ò—Ç–æ–≥' –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    if not text:
        return ""
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –Ω–∞ "–ò—Ç–æ–≥"
    lines = text.splitlines()
    itog_idx = next((i for i, line in enumerate(lines) if line.strip().lower().startswith("–∏—Ç–æ–≥")), None)
    if itog_idx is None:
        # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –ø–∏—à–µ—Ç "–ò—Ç–æ–≥ ‚Äî ..." –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è
        itog_idx = next((i for i, line in enumerate(lines) if "–∏—Ç–æ–≥" in line.strip().lower()), None)
    if itog_idx is None:
        return ""

    # –ë–µ—Ä–µ–º –≤—Å—ë –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å "–ò—Ç–æ–≥"
    tail = [s for s in lines[itog_idx+1:] if s.strip()]
    return " ".join(tail).strip()


# ---------- –≥–ª—É—à–∏–ª–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π ¬´—ç—Ö–æ¬ª —Å—Ç–∞—Ä—ã—Ö Reply-–∫–Ω–æ–ø–æ–∫ ----------
SILENT_LABELS = {
    "üóÇ –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É","üìù –°–≤–æ–π –≤–æ–ø—Ä–æ—Å","üéÅ –ü—Ä–æ–º–æ–∫–æ–¥","üë§ –ü—Ä–æ—Ñ–∏–ª—å",
    "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞","üõí –ö—É–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
    "–õ—é–±–æ–≤—å","–†–∞–±–æ—Ç–∞","–°—É–¥—å–±–∞","–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
    "–¢—Ä–∏ –∫–∞—Ä—Ç—ã","–ü–æ–¥–∫–æ–≤–∞","–ê–ª—Ö–∏–º–∏–∫","‚¨ÖÔ∏è –í –º–µ–Ω—é","üîô –ù–∞–∑–∞–¥"
}
@router.message(F.text.in_(SILENT_LABELS))
async def swallow_reply_keyboard_echo(message: Message):
    return
